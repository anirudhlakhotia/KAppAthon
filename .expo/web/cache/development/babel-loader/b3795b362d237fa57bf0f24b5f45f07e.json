{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction range(start, end) {\n  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var allNumbers = [start, end, step].every(Number.isFinite);\n\n  if (!allNumbers) {\n    throw new TypeError('range() expects only finite numbers as arguments.');\n  }\n\n  if (step <= 0) {\n    throw new Error('step must be a number greater than 0.');\n  }\n\n  if (start > end) {\n    step = -step;\n  }\n\n  var length = Math.floor(Math.abs((end - start) / step)) + 1;\n  return Array.from(Array(length), function (x, index) {\n    return start + index * step;\n  });\n}\n\nexports.default = range;","map":{"version":3,"sources":["../../../src/utils/range.ts"],"names":[],"mappings":";;;;;;AAAA,SAAwB,KAAxB,CAA8B,KAA9B,EAA6C,GAA7C,EAAkE;AAAA,MAAR,IAAQ,uEAAD,CAAC;AAGhE,MAAM,UAAU,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,IAAb,EAAmB,KAAnB,CAAyB,MAAM,CAAC,QAAhC,CAAnB;;AAGA,MAAI,CAAC,UAAL,EAAiB;AACf,UAAM,IAAI,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAGD,MAAI,IAAI,IAAI,CAAZ,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAID,MAAI,KAAK,GAAG,GAAZ,EAAiB;AACf,IAAA,IAAI,GAAG,CAAC,IAAR;AACD;;AAKD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,GAAG,KAAP,IAAgB,IAAzB,CAAX,IAA6C,CAA5D;AAKA,SAAO,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,MAAD,CAAhB,EAA0B,UAAC,CAAD,EAAI,KAAJ;AAAA,WAAc,KAAK,GAAG,KAAK,GAAG,IAA9B;AAAA,GAA1B,CAAP;AACD;;AA9BD,OAAA,CAAA,OAAA,GAAA,KAAA","sourcesContent":["export default function range(start: number, end: number, step = 1) {\n  // Test that the first 3 arguments are finite numbers.\n  // Using Array.prototype.every() and Number.isFinite().\n  const allNumbers = [start, end, step].every(Number.isFinite);\n\n  // Throw an error if any of the first 3 arguments is not a finite number.\n  if (!allNumbers) {\n    throw new TypeError('range() expects only finite numbers as arguments.');\n  }\n\n  // Ensure the step is always a positive number.\n  if (step <= 0) {\n    throw new Error('step must be a number greater than 0.');\n  }\n\n  // When the start number is greater than the end number,\n  // modify the step for decrementing instead of incrementing.\n  if (start > end) {\n    step = -step;\n  }\n\n  // Determine the length of the array to be returned.\n  // The length is incremented by 1 after Math.floor().\n  // This ensures that the end number is listed if it falls within the range.\n  const length = Math.floor(Math.abs((end - start) / step)) + 1;\n\n  // Fill up a new array with the range numbers\n  // using Array.from() with a mapping function.\n  // Finally, return the new array.\n  return Array.from(Array(length), (x, index) => start + index * step);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}