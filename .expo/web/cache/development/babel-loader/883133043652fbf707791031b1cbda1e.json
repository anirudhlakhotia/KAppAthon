{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nexport var getToken = function getToken(token) {\n  return _regeneratorRuntime.async(function getToken$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function _callee(resolve, reject) {\n            var value;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"@auth_token\"));\n\n                  case 3:\n                    value = _context.sent;\n                    resolve(value);\n                    _context.next = 10;\n                    break;\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    resolve(false);\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 7]], Promise);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var setToken = function setToken(token) {\n  return _regeneratorRuntime.async(function setToken$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", new Promise(function _callee2(resolve, reject) {\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    try {\n                      AsyncStorage.setItem(\"@auth_token\", token);\n                      console.log(\"Token is set\");\n                      resolve(true);\n                    } catch (e) {\n                      resolve(false);\n                    }\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/anirudh/Desktop/kAppAthon/KAppAthon/src/api/token.js"],"names":["AsyncStorage","getToken","token","Promise","resolve","reject","getItem","value","setToken","setItem","console","log","e"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,4CACf,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAEKL,YAAY,CAACM,OAAb,CAAqB,aAArB,CAFL;;AAAA;AAETC,oBAAAA,KAFS;AAGfH,oBAAAA,OAAO,CAACG,KAAD,CAAP;AAHe;AAAA;;AAAA;AAAA;AAAA;AAKfH,oBAAAA,OAAO,CAAC,KAAD,CAAP;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAsBP,OAAO,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAgBN,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,4CACf,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AACjB,wBAAI;AACFL,sBAAAA,YAAY,CAACS,OAAb,CAAqB,aAArB,EAAoCP,KAApC;AACAQ,sBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAP,sBAAAA,OAAO,CAAC,IAAD,CAAP;AACD,qBAJD,CAIE,OAAOQ,CAAP,EAAU;AAEVR,sBAAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AARgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import AsyncStorage from \"@react-native-community/async-storage\";\n\nexport const getToken = async function (token) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const value = await AsyncStorage.getItem(\"@auth_token\");\n      resolve(value);\n    } catch (e) {\n      resolve(false);\n    }\n    // } catch (e) {\n    //   return null;\n    // }\n  });\n};\n\n// export const setToken = async (token) => {\n//   try {\n//     await AsyncStorage.setItem('@auth_token', token);\n//     console.log('SET TOKEN')\n//   } catch (e) {\n//     return null;\n//   }\n// };\nexport const setToken = async function (token) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      AsyncStorage.setItem(\"@auth_token\", token);\n      console.log(\"Token is set\");\n      resolve(true);\n    } catch (e) {\n      //important that we do not reject here\n      resolve(false);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}