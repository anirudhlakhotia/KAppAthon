{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js\";\n\nimport React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { widthPercentageToDP } from 'react-native-responsive-screen';\n\nvar LoginScreen = function LoginScreen() {\n  var submit = function submit() {\n    var formDat = new FormData();\n    formDat.append('username', values.email);\n    formDat.append('password', values.password);\n    console.log(formDat);\n  };\n\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required('Email Address is Required'),\n    password: yup.string().min(8, function (_ref) {\n      var min = _ref.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required('Password is required')\n  });\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, \"Login Screen\"), React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      return submit;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"Email Address\",\n      style: styles.textInput,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }\n    }), errors.email && touched.email && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      style: styles.textInput,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 8\n      }\n    }), errors.password && touched.password && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, errors.password), React.createElement(Button, {\n      onPress: handleSubmit,\n      title: \"LOGIN\",\n      disabled: !isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 8\n      }\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: '80%',\n    alignSelf: 'center',\n    backgroundColor: 'white',\n    padding: widthPercentageToDP('5%'),\n    elevation: 10,\n    backgroundColor: '#e6e6e6'\n  },\n  textInput: {\n    height: widthPercentageToDP('10%'),\n    width: '100%',\n    margin: 10,\n    textAlign: 'center',\n    backgroundColor: 'white',\n    borderColor: 'gray',\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: widthPercentageToDP('50%')\n  },\n  errorText: {\n    fontSize: 10,\n    color: 'red'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js"],"names":["React","yup","Formik","widthPercentageToDP","LoginScreen","submit","formDat","FormData","append","values","email","password","console","log","loginValidationSchema","object","shape","string","required","min","styles","loginContainer","handleChange","handleBlur","handleSubmit","errors","touched","isValid","textInput","errorText","StyleSheet","create","width","alignSelf","backgroundColor","padding","elevation","height","margin","textAlign","borderColor","borderWidth","hairlineWidth","borderRadius","fontSize","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n  Button,\n  TextInput,\n} from 'react-native'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { widthPercentageToDP } from 'react-native-responsive-screen'\n\nconst LoginScreen = () => {\n    const submit=()=>{\n        let formDat = new FormData();\n        formDat.append('username',values.email)\n        formDat.append('password',values.password)\n        console.log(formDat)\n    }\n    const loginValidationSchema = yup.object().shape({\n        email: yup\n          .string()\n          .email(\"Please enter valid email\")\n          .required('Email Address is Required'),\n        password: yup\n          .string()\n          .min(8, ({ min }) => `Password must be at least ${min} characters`)\n          .required('Password is required'),\n      })\n  return (\n    <View style={styles.loginContainer}>\n    <Text>Login Screen</Text>\n    <Formik\n   validationSchema={loginValidationSchema}\n   initialValues={{ email: '', password: '' }}\n   onSubmit={values => submit}\n >\n   {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n              isValid,\n            }) => (\n               \n     <>\n     \n  \n                \n       <TextInput\n         name=\"email\"\n         placeholder=\"Email Address\"\n         style={styles.textInput}\n         onChangeText={handleChange('email')}\n         onBlur={handleBlur('email')}\n         value={values.email}\n         keyboardType=\"email-address\"\n       />\n       {(errors.email && touched.email) &&\n                    <Text style={styles.errorText}>{errors.email}</Text>\n                  }\n       <TextInput\n         name=\"password\"\n         placeholder=\"Password\"\n         style={styles.textInput}\n         onChangeText={handleChange('password')}\n         onBlur={handleBlur('password')}\n         value={values.password}\n         secureTextEntry\n       />\n         {(errors.password && touched.password) &&\n                    <Text style={styles.errorText}>{errors.password}</Text>\n                  }\n       <Button\n         onPress={handleSubmit}\n         title=\"LOGIN\"\n         disabled={!isValid}\n       />\n     </>\n   )}\n </Formik>\n  </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n\n    loginContainer: {\n      width: '80%',\n      alignSelf: 'center',\n      backgroundColor: 'white',\n      padding: widthPercentageToDP('5%'),\n      elevation: 10,\n      backgroundColor: '#e6e6e6'\n    },\n    textInput: {\n      height: widthPercentageToDP('10%'),\n      width: '100%',\n      margin: 10,\n      textAlign: 'center',\n      backgroundColor: 'white',\n      borderColor: 'gray',\n      borderWidth: StyleSheet.hairlineWidth,\n      borderRadius:widthPercentageToDP('50%'),\n    },\n    errorText: {\n        fontSize: 10,\n        color: 'red',\n      }\n  })\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}