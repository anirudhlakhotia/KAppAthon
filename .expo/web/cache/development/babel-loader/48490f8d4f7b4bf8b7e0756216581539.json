{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js\";\n\nimport React, { useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { widthPercentageToDP } from 'react-native-responsive-screen';\nimport { post } from \"./../api/fetch\";\nimport { setToken } from \"./../api/token\";\n\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required('Email Address is Required'),\n    password: yup.string().min(8, function (_ref) {\n      var min = _ref.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required('Password is required')\n  });\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      var params = {\n        'username': values.email,\n        'password': values.password\n      };\n      var formBody = [];\n\n      for (var property in params) {\n        var encodedKey = encodeURIComponent(property);\n        var encodedValue = encodeURIComponent(params[property]);\n        formBody.push(encodedKey + \"=\" + encodedValue);\n      }\n\n      formBody = formBody.join(\"&\");\n      post('/login', formBody).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(res.data);\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(setToken(res.data.token));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }).catch(function (res) {\n        if (res && res.error) {\n          setErrorMessage(res.error);\n        }\n\n        setErrorMessage('Something went wrong.');\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"Email Address\",\n      style: styles.textInput,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }\n    }), errors.email && touched.email && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      style: styles.textInput,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }\n    }), errors.password && touched.password && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, errors.password), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, '\\n'), React.createElement(TouchableOpacity, {\n      onPress: handleSubmit,\n      disabled: !isValid,\n      style: {\n        backgroundColor: '#9370DB',\n        height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),\n        borderRadius: widthPercentageToDP('5%'),\n        overflow: 'hidden',\n        alignSelf: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 8\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        color: 'white',\n        fontFamily: 'sans-serif',\n        marginTop: widthPercentageToDP('2%')\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 4\n      }\n    }, \"LOGIN\")));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: '90%',\n    height: '40%',\n    maxHeight: '70%',\n    alignSelf: 'center',\n    backgroundColor: '#f2f2f2',\n    padding: widthPercentageToDP('5%'),\n    elevation: 10,\n    marginTop: widthPercentageToDP('30%'),\n    borderRadius: widthPercentageToDP('15%')\n  },\n  textInput: {\n    paddingLeft: 10,\n    height: widthPercentageToDP('10%'),\n    width: widthPercentageToDP('70%'),\n    alignSelf: 'center',\n    borderColor: '#4B0082',\n    borderRadius: widthPercentageToDP('5%'),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: '#fff'\n  },\n  errorText: {\n    fontSize: widthPercentageToDP('3%'),\n    textAlign: 'center',\n    marginTop: widthPercentageToDP('5%'),\n    color: 'red'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js"],"names":["React","useState","yup","Formik","widthPercentageToDP","post","setToken","LoginScreen","errorMessage","setErrorMessage","loginValidationSchema","object","shape","email","string","required","password","min","styles","loginContainer","values","params","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","then","res","console","log","data","token","catch","error","handleChange","handleBlur","handleSubmit","errors","touched","isValid","textInput","errorText","backgroundColor","height","width","borderRadius","overflow","alignSelf","textAlign","color","fontFamily","marginTop","StyleSheet","create","maxHeight","padding","elevation","paddingLeft","borderColor","borderWidth","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n  Button,\n  TextInput,\n  TouchableOpacity,\n  \n} from 'react-native'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { widthPercentageToDP } from 'react-native-responsive-screen'\nimport {post} from './../api/fetch'\nimport {setToken} from './../api/token'\nconst LoginScreen = () => {\n    const [errorMessage, setErrorMessage] = useState('');\n    const loginValidationSchema = yup.object().shape({\n        email: yup\n          .string()\n          .email(\"Please enter valid email\")\n          .required('Email Address is Required'),\n        password: yup\n          .string()\n          .min(8, ({ min }) => `Password must be at least ${min} characters`)\n          .required('Password is required'),\n      })\n  return (\n    <View style={styles.loginContainer}>\n    <Formik\n   validationSchema={loginValidationSchema}\n   initialValues={{ email: '', password: '' }}\n   onSubmit={values => {\n  var params={\n    'username': values.email,\n    'password':values.password\n}\nvar formBody=[]\nfor (var property in params){\n    var encodedKey= encodeURIComponent(property)\n    var encodedValue=encodeURIComponent(params[property])\n    formBody.push(encodedKey+ \"=\"+ encodedValue)\n}\nformBody=formBody.join(\"&\")\npost('/login',formBody).then(async (res) => {\n    console.log(res.data)\n    await setToken(res.data.token)\n    \n  }).catch((res) => {\n    if (res && res.error) {\n      setErrorMessage(res.error);\n    }\n\n    setErrorMessage('Something went wrong.');\n  });\n   }}\n >\n   {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n              isValid,\n            }) => (\n               \n     <>\n     \n                \n       <TextInput\n         name=\"email\"\n         placeholder=\"Email Address\"\n         style={styles.textInput}\n         onChangeText={handleChange('email')}\n         onBlur={handleBlur('email')}\n         value={values.email}\n         keyboardType=\"email-address\"\n       />\n       {(errors.email && touched.email) &&\n                    <Text style={styles.errorText}>{errors.email}</Text>\n                  }\n       <TextInput\n         name=\"password\"\n         placeholder=\"Password\"\n         style={styles.textInput}\n         onChangeText={handleChange('password')}\n         onBlur={handleBlur('password')}\n         value={values.password}\n         secureTextEntry\n       />\n         {(errors.password && touched.password) &&\n                    <Text style={styles.errorText}>{errors.password}</Text>\n                  }\n        <Text>{'\\n'}</Text>\n\n       {/* <Button  color=\"#9370DB\" style={{borderRadius:widthPercentageToDP('30%')}}\n         onPress={handleSubmit}\n         title=\"LOGIN\"\n         disabled={!isValid}\n       /> */}\n       <TouchableOpacity onPress={handleSubmit} disabled={!isValid} style={{backgroundColor: '#9370DB',height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),borderRadius:widthPercentageToDP('5%'),overflow:'hidden',alignSelf:'center' }}>\n   <Text style={{textAlign:'center',color:'white',fontFamily:'sans-serif',marginTop:widthPercentageToDP('2%')}}>LOGIN</Text>\n</TouchableOpacity>\n     </>\n   )}\n </Formik>\n  </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n\n    loginContainer: {\n      width: '90%',\n      height:'40%',\n      maxHeight:'70%',\n      alignSelf: 'center',\n      backgroundColor: '#f2f2f2',\n      padding: widthPercentageToDP('5%'),\n      elevation: 10,\n      marginTop:widthPercentageToDP('30%'),\n      borderRadius:widthPercentageToDP('15%')\n    },\n    textInput: {\n        paddingLeft:10,\n        height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),\n        alignSelf:'center',\n        borderColor: '#4B0082',\n        borderRadius: widthPercentageToDP('5%'),\n        borderWidth: 1,\n        marginTop: 20,\n        backgroundColor: '#fff'\n      },\n    errorText: {\n        fontSize: widthPercentageToDP('3%'),\n        textAlign:'center',\n        marginTop:widthPercentageToDP('5%'),\n        color: 'red',\n      },\n  })\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}