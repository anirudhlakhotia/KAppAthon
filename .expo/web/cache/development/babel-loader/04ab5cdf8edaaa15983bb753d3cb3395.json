{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js\";\n\nimport React, { useState } from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { widthPercentageToDP } from \"react-native-responsive-screen\";\nimport { post } from \"./../api/fetch\";\nimport { setToken, getToken } from \"./../api/token\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var goToDash = function goToDash() {\n    var token;\n    return _regeneratorRuntime.async(function goToDash$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"GoToDash\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getToken());\n\n          case 3:\n            token = _context.sent;\n\n            if (token !== false) {\n              navigation.navigate(\"StudentDash\");\n            }\n\n            console.log(token);\n\n            if (token != \"undefined\") {}\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required(\"Email Address is Required\"),\n    password: yup.string().min(8, function (_ref2) {\n      var min = _ref2.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required(\"Password is required\")\n  });\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      var params = {\n        username: values.email,\n        password: values.password\n      };\n      var formBody = [];\n\n      for (var property in params) {\n        var encodedKey = encodeURIComponent(property);\n        var encodedValue = encodeURIComponent(params[property]);\n        formBody.push(encodedKey + \"=\" + encodedValue);\n      }\n\n      formBody = formBody.join(\"&\");\n      post(\"/login\", formBody).then(function _callee(res) {\n        var response;\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(res.data);\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(setToken(res.data.token));\n\n              case 3:\n                response = _context2.sent;\n\n                if (response !== false) {\n                  goToDash();\n                  navigation.navigate(\"AdminDash\");\n                } else {\n                  console.log(\"ERROR\");\n                }\n\n                goToDash();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }).catch(function (res) {\n        if (res && res.error) {\n          setErrorMessage(res.error);\n        }\n\n        setErrorMessage(\"Something went wrong.\");\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        isValid = _ref3.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"Email Address\",\n      style: styles.textInput,\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), errors.email && touched.email && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      style: styles.textInput,\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }), errors.password && touched.password && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, errors.password), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"\\n\"), React.createElement(TouchableOpacity, {\n      onPress: handleSubmit,\n      disabled: !isValid,\n      style: {\n        backgroundColor: \"#9370DB\",\n        height: widthPercentageToDP(\"10%\"),\n        width: widthPercentageToDP(\"70%\"),\n        borderRadius: widthPercentageToDP(\"5%\"),\n        overflow: \"hidden\",\n        alignSelf: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: \"center\",\n        color: \"white\",\n        fontFamily: \"sans-serif\",\n        marginTop: widthPercentageToDP(\"2%\")\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, \"LOGIN\")));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: \"90%\",\n    height: \"40%\",\n    maxHeight: \"70%\",\n    alignSelf: \"center\",\n    backgroundColor: \"#f2f2f2\",\n    padding: widthPercentageToDP(\"5%\"),\n    elevation: 10,\n    marginTop: widthPercentageToDP(\"30%\"),\n    borderRadius: widthPercentageToDP(\"15%\")\n  },\n  textInput: {\n    paddingLeft: 10,\n    height: widthPercentageToDP(\"10%\"),\n    width: widthPercentageToDP(\"70%\"),\n    alignSelf: \"center\",\n    borderColor: \"#4B0082\",\n    borderRadius: widthPercentageToDP(\"5%\"),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: \"#fff\"\n  },\n  errorText: {\n    fontSize: widthPercentageToDP(\"3%\"),\n    textAlign: \"center\",\n    marginTop: widthPercentageToDP(\"5%\"),\n    color: \"red\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js"],"names":["React","useState","yup","Formik","widthPercentageToDP","post","setToken","getToken","LoginScreen","navigation","goToDash","console","log","token","navigate","errorMessage","setErrorMessage","loginValidationSchema","object","shape","email","string","required","password","min","styles","loginContainer","values","params","username","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","then","res","data","response","catch","error","handleChange","handleBlur","handleSubmit","errors","touched","isValid","textInput","errorText","backgroundColor","height","width","borderRadius","overflow","alignSelf","textAlign","color","fontFamily","marginTop","StyleSheet","create","maxHeight","padding","elevation","paddingLeft","borderColor","borderWidth","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n  Button,\n  TextInput,\n  TouchableOpacity,\n} from \"react-native\";\nimport * as yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { widthPercentageToDP } from \"react-native-responsive-screen\";\nimport { post } from \"./../api/fetch\";\nimport { setToken, getToken } from \"./../api/token\";\nconst LoginScreen = ({ navigation }) => {\n  const goToDash = async () => {\n    console.log(\"GoToDash\");\n    var token = await getToken();\n    if(token !== false) {\n        // means that it succeeded\n        navigation.navigate(\"StudentDash\");\n    }\n    console.log(token);\n    if (token != \"undefined\") {\n      \n    }\n  };\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const loginValidationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .email(\"Please enter valid email\")\n      .required(\"Email Address is Required\"),\n    password: yup\n      .string()\n      .min(8, ({ min }) => `Password must be at least ${min} characters`)\n      .required(\"Password is required\"),\n  });\n  return (\n    <View style={styles.loginContainer}>\n      <Formik\n        validationSchema={loginValidationSchema}\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={(values) => {\n          var params = {\n            username: values.email,\n            password: values.password,\n          };\n          var formBody = [];\n          for (var property in params) {\n            var encodedKey = encodeURIComponent(property);\n            var encodedValue = encodeURIComponent(params[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n          }\n          formBody = formBody.join(\"&\");\n          post(\"/login\", formBody)\n            .then(async (res) => {\n              console.log(res.data);\n              const response = await setToken(res.data.token);\n              if (response !== false) {\n                goToDash();\n                navigation.navigate(\"AdminDash\");\n              } else {\n                //means it failed\n                console.log(\"ERROR\");\n              }\n              goToDash();\n            })\n            .catch((res) => {\n              if (res && res.error) {\n                setErrorMessage(res.error);\n              }\n\n              setErrorMessage(\"Something went wrong.\");\n            });\n        }}\n      >\n        {({\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          values,\n          errors,\n          touched,\n          isValid,\n        }) => (\n          <>\n            <TextInput\n              name=\"email\"\n              placeholder=\"Email Address\"\n              style={styles.textInput}\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              value={values.email}\n              keyboardType=\"email-address\"\n            />\n            {errors.email && touched.email && (\n              <Text style={styles.errorText}>{errors.email}</Text>\n            )}\n            <TextInput\n              name=\"password\"\n              placeholder=\"Password\"\n              style={styles.textInput}\n              onChangeText={handleChange(\"password\")}\n              onBlur={handleBlur(\"password\")}\n              value={values.password}\n              secureTextEntry\n            />\n            {errors.password && touched.password && (\n              <Text style={styles.errorText}>{errors.password}</Text>\n            )}\n            <Text>{\"\\n\"}</Text>\n\n            {/* <Button  color=\"#9370DB\" style={{borderRadius:widthPercentageToDP('30%')}}\n         onPress={handleSubmit}\n         title=\"LOGIN\"\n         disabled={!isValid}\n       /> */}\n            <TouchableOpacity\n              onPress={handleSubmit}\n              disabled={!isValid}\n              style={{\n                backgroundColor: \"#9370DB\",\n                height: widthPercentageToDP(\"10%\"),\n                width: widthPercentageToDP(\"70%\"),\n                borderRadius: widthPercentageToDP(\"5%\"),\n                overflow: \"hidden\",\n                alignSelf: \"center\",\n              }}\n            >\n              <Text\n                style={{\n                  textAlign: \"center\",\n                  color: \"white\",\n                  fontFamily: \"sans-serif\",\n                  marginTop: widthPercentageToDP(\"2%\"),\n                }}\n              >\n                LOGIN\n              </Text>\n            </TouchableOpacity>\n          </>\n        )}\n      </Formik>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loginContainer: {\n    width: \"90%\",\n    height: \"40%\",\n    maxHeight: \"70%\",\n    alignSelf: \"center\",\n    backgroundColor: \"#f2f2f2\",\n    padding: widthPercentageToDP(\"5%\"),\n    elevation: 10,\n    marginTop: widthPercentageToDP(\"30%\"),\n    borderRadius: widthPercentageToDP(\"15%\"),\n  },\n  textInput: {\n    paddingLeft: 10,\n    height: widthPercentageToDP(\"10%\"),\n    width: widthPercentageToDP(\"70%\"),\n    alignSelf: \"center\",\n    borderColor: \"#4B0082\",\n    borderRadius: widthPercentageToDP(\"5%\"),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: \"#fff\",\n  },\n  errorText: {\n    fontSize: widthPercentageToDP(\"3%\"),\n    textAlign: \"center\",\n    marginTop: widthPercentageToDP(\"5%\"),\n    color: \"red\",\n  },\n});\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}