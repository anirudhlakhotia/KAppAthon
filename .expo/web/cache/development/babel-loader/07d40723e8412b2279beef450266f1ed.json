{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js\";\n\nimport React, { useState } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { widthPercentageToDP } from 'react-native-responsive-screen';\nimport { post } from \"./../api/fetch\";\nimport { setToken, getToken } from \"./../api/token\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var goToDash = function goToDash() {\n    var token = getToken();\n    console.log(type(token));\n\n    if (token != \"undefined\") {\n      navigation.navigate('AdminDash');\n    }\n  };\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required('Email Address is Required'),\n    password: yup.string().min(8, function (_ref2) {\n      var min = _ref2.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required('Password is required')\n  });\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      var params = {\n        'username': values.email,\n        'password': values.password\n      };\n      var formBody = [];\n\n      for (var property in params) {\n        var encodedKey = encodeURIComponent(property);\n        var encodedValue = encodeURIComponent(params[property]);\n        formBody.push(encodedKey + \"=\" + encodedValue);\n      }\n\n      formBody = formBody.join(\"&\");\n      post('/login', formBody).then(function (res) {\n        console.log(res.data);\n        var response = setToken(res.data.token);\n\n        if (response !== false) {\n          goToDash();\n        } else {\n          console.log('ERROR');\n        }\n\n        goToDash();\n      }).catch(function (res) {\n        if (res && res.error) {\n          setErrorMessage(res.error);\n        }\n\n        setErrorMessage('Something went wrong.');\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, function (_ref3) {\n    var handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        isValid = _ref3.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"Email Address\",\n      style: styles.textInput,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 8\n      }\n    }), errors.email && touched.email && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      style: styles.textInput,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 8\n      }\n    }), errors.password && touched.password && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, errors.password), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, '\\n'), React.createElement(TouchableOpacity, {\n      onPress: handleSubmit,\n      disabled: !isValid,\n      style: {\n        backgroundColor: '#9370DB',\n        height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),\n        borderRadius: widthPercentageToDP('5%'),\n        overflow: 'hidden',\n        alignSelf: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 8\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        color: 'white',\n        fontFamily: 'sans-serif',\n        marginTop: widthPercentageToDP('2%')\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 4\n      }\n    }, \"LOGIN\")));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: '90%',\n    height: '40%',\n    maxHeight: '70%',\n    alignSelf: 'center',\n    backgroundColor: '#f2f2f2',\n    padding: widthPercentageToDP('5%'),\n    elevation: 10,\n    marginTop: widthPercentageToDP('30%'),\n    borderRadius: widthPercentageToDP('15%')\n  },\n  textInput: {\n    paddingLeft: 10,\n    height: widthPercentageToDP('10%'),\n    width: widthPercentageToDP('70%'),\n    alignSelf: 'center',\n    borderColor: '#4B0082',\n    borderRadius: widthPercentageToDP('5%'),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: '#fff'\n  },\n  errorText: {\n    fontSize: widthPercentageToDP('3%'),\n    textAlign: 'center',\n    marginTop: widthPercentageToDP('5%'),\n    color: 'red'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js"],"names":["React","useState","yup","Formik","widthPercentageToDP","post","setToken","getToken","LoginScreen","navigation","goToDash","token","console","log","type","navigate","errorMessage","setErrorMessage","loginValidationSchema","object","shape","email","string","required","password","min","styles","loginContainer","values","params","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","then","res","data","response","catch","error","handleChange","handleBlur","handleSubmit","errors","touched","isValid","textInput","errorText","backgroundColor","height","width","borderRadius","overflow","alignSelf","textAlign","color","fontFamily","marginTop","StyleSheet","create","maxHeight","padding","elevation","paddingLeft","borderColor","borderWidth","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n  Button,\n  TextInput,\n  TouchableOpacity,\n  \n} from 'react-native'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { widthPercentageToDP } from 'react-native-responsive-screen'\nimport {post} from './../api/fetch'\nimport {setToken,getToken} from './../api/token'\nconst LoginScreen = ({navigation}) => {\n    const goToDash =()=>{\n    var token=getToken()\n    console.log(type(token))\n    if(token!=\"undefined\"){\n    navigation.navigate('AdminDash')\n    }\n    }\n    const [errorMessage, setErrorMessage] = useState('');\n    const loginValidationSchema = yup.object().shape({\n        email: yup\n          .string()\n          .email(\"Please enter valid email\")\n          .required('Email Address is Required'),\n        password: yup\n          .string()\n          .min(8, ({ min }) => `Password must be at least ${min} characters`)\n          .required('Password is required'),\n      })\n  return (\n    <View style={styles.loginContainer}>\n    <Formik\n   validationSchema={loginValidationSchema}\n   initialValues={{ email: '', password: '' }}\n   onSubmit={values => {\n  var params={\n    'username': values.email,\n    'password':values.password\n}\nvar formBody=[]\nfor (var property in params){\n    var encodedKey= encodeURIComponent(property)\n    var encodedValue=encodeURIComponent(params[property])\n    formBody.push(encodedKey+ \"=\"+ encodedValue)\n}\nformBody=formBody.join(\"&\")\npost('/login',formBody).then((res) => {\n    console.log(res.data)\n    const response =  setToken(res.data.token)\n    if(response !== false) {\n     goToDash()\n    }\n  else {\n    //means it failed\n    console.log('ERROR')\n    }\n    goToDash()\n    \n  }).catch((res) => {\n    if (res && res.error) {\n      setErrorMessage(res.error);\n    }\n\n    setErrorMessage('Something went wrong.');\n  });\n   }}\n >\n   {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n              isValid,\n            }) => (\n               \n     <>\n     \n                \n       <TextInput\n         name=\"email\"\n         placeholder=\"Email Address\"\n         style={styles.textInput}\n         onChangeText={handleChange('email')}\n         onBlur={handleBlur('email')}\n         value={values.email}\n         keyboardType=\"email-address\"\n       />\n       {(errors.email && touched.email) &&\n                    <Text style={styles.errorText}>{errors.email}</Text>\n                  }\n       <TextInput\n         name=\"password\"\n         placeholder=\"Password\"\n         style={styles.textInput}\n         onChangeText={handleChange('password')}\n         onBlur={handleBlur('password')}\n         value={values.password}\n         secureTextEntry\n       />\n         {(errors.password && touched.password) &&\n                    <Text style={styles.errorText}>{errors.password}</Text>\n                  }\n        <Text>{'\\n'}</Text>\n\n       {/* <Button  color=\"#9370DB\" style={{borderRadius:widthPercentageToDP('30%')}}\n         onPress={handleSubmit}\n         title=\"LOGIN\"\n         disabled={!isValid}\n       /> */}\n       <TouchableOpacity onPress={handleSubmit} disabled={!isValid} style={{backgroundColor: '#9370DB',height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),borderRadius:widthPercentageToDP('5%'),overflow:'hidden',alignSelf:'center' }}>\n   <Text style={{textAlign:'center',color:'white',fontFamily:'sans-serif',marginTop:widthPercentageToDP('2%')}}>LOGIN</Text>\n</TouchableOpacity>\n     </>\n   )}\n </Formik>\n  </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n\n    loginContainer: {\n      width: '90%',\n      height:'40%',\n      maxHeight:'70%',\n      alignSelf: 'center',\n      backgroundColor: '#f2f2f2',\n      padding: widthPercentageToDP('5%'),\n      elevation: 10,\n      marginTop:widthPercentageToDP('30%'),\n      borderRadius:widthPercentageToDP('15%')\n    },\n    textInput: {\n        paddingLeft:10,\n        height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),\n        alignSelf:'center',\n        borderColor: '#4B0082',\n        borderRadius: widthPercentageToDP('5%'),\n        borderWidth: 1,\n        marginTop: 20,\n        backgroundColor: '#fff'\n      },\n    errorText: {\n        fontSize: widthPercentageToDP('3%'),\n        textAlign:'center',\n        marginTop:widthPercentageToDP('5%'),\n        color: 'red',\n      },\n  })\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}