{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { widthPercentageToDP } from 'react-native-responsive-screen';\nimport { post } from \"./../api/fetch\";\n\nvar LoginScreen = function LoginScreen() {\n  var loginValidationSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter valid email\").required('Email Address is Required'),\n    password: yup.string().min(8, function (_ref) {\n      var min = _ref.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required('Password is required')\n  });\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, \"Login Screen\"), React.createElement(Formik, {\n    validationSchema: loginValidationSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      var formDat = new FormData();\n      formDat.append('username', values.email);\n      formDat.append('password', values.password);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(formDat.values()), _step; !(_step = _iterator()).done;) {\n        var value = _step.value;\n        console.log(value);\n      }\n\n      console.log({\n        'username': values.email,\n        'password': values.password\n      }.username);\n      post('/login', {\n        'username': values.email,\n        'password': values.password\n      }).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(res);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"Email Address\",\n      style: styles.textInput,\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 8\n      }\n    }), errors.email && touched.email && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      style: styles.textInput,\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 8\n      }\n    }), errors.password && touched.password && React.createElement(Text, {\n      style: styles.errorText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, errors.password), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, '\\n'), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, '\\n'), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, '\\n'), React.createElement(Button, {\n      style: styles.button,\n      onPress: handleSubmit,\n      title: \"LOGIN\",\n      disabled: !isValid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 8\n      }\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: '90%',\n    height: '50%',\n    alignSelf: 'center',\n    backgroundColor: 'white',\n    padding: widthPercentageToDP('5%'),\n    elevation: 10,\n    backgroundColor: '#e6e6e6',\n    marginTop: widthPercentageToDP('30%'),\n    borderRadius: widthPercentageToDP('30%')\n  },\n  textInput: {\n    paddingLeft: 10,\n    height: widthPercentageToDP('10%'),\n    width: widthPercentageToDP('70%'),\n    alignSelf: 'center',\n    borderColor: '#4B0082',\n    borderRadius: widthPercentageToDP('5%'),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: '#f6f6f6'\n  },\n  errorText: {\n    fontSize: 10,\n    color: 'red'\n  },\n  button: {\n    marginTop: widthPercentageToDP('15%'),\n    width: widthPercentageToDP('60%'),\n    fontSize: widthPercentageToDP('20%'),\n    alignSelf: 'center',\n    textAlign: 'center',\n    paddingTop: widthPercentageToDP('3%'),\n    height: widthPercentageToDP('10%'),\n    backgroundColor: '#9370DB',\n    color: 'white',\n    borderRadius: widthPercentageToDP('20%'),\n    marginLeft: widthPercentageToDP('10%'),\n    overflow: 'hidden'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/screens/LoginScreen.js"],"names":["React","yup","Formik","widthPercentageToDP","post","LoginScreen","loginValidationSchema","object","shape","email","string","required","password","min","styles","loginContainer","values","formDat","FormData","append","value","console","log","username","then","res","handleChange","handleBlur","handleSubmit","errors","touched","isValid","textInput","errorText","button","StyleSheet","create","width","height","alignSelf","backgroundColor","padding","elevation","marginTop","borderRadius","paddingLeft","borderColor","borderWidth","fontSize","color","textAlign","paddingTop","marginLeft","overflow"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n  Button,\n  TextInput,\n} from 'react-native'\nimport * as yup from 'yup'\nimport { Formik } from 'formik'\nimport { widthPercentageToDP } from 'react-native-responsive-screen'\nimport {post} from './../api/fetch'\nconst LoginScreen = () => {\n    const loginValidationSchema = yup.object().shape({\n        email: yup\n          .string()\n          .email(\"Please enter valid email\")\n          .required('Email Address is Required'),\n        password: yup\n          .string()\n          .min(8, ({ min }) => `Password must be at least ${min} characters`)\n          .required('Password is required'),\n      })\n  return (\n    <View style={styles.loginContainer}>\n    <Text>Login Screen</Text>\n    <Formik\n   validationSchema={loginValidationSchema}\n   initialValues={{ email: '', password: '' }}\n   onSubmit={values => {\n    let formDat = new FormData();\n    formDat.append('username',values.email)\n    formDat.append('password',values.password)\n    for (var value of formDat.values()) {\n        console.log(value); \n     }\n     console.log((\n        {\n            'username': values.email,\n            'password':values.password\n        }.username\n     )\n     )\n    post('/login',{\n        'username': values.email,\n        'password':values.password\n    }).then(async (res)=>{\n        console.log(res)\n      })\n   }}\n >\n   {({\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              values,\n              errors,\n              touched,\n              isValid,\n            }) => (\n               \n     <>\n     \n  \n                \n       <TextInput\n         name=\"email\"\n         placeholder=\"Email Address\"\n         style={styles.textInput}\n         onChangeText={handleChange('email')}\n         onBlur={handleBlur('email')}\n         value={values.email}\n         keyboardType=\"email-address\"\n       />\n       {(errors.email && touched.email) &&\n                    <Text style={styles.errorText}>{errors.email}</Text>\n                  }\n       <TextInput\n         name=\"password\"\n         placeholder=\"Password\"\n         style={styles.textInput}\n         onChangeText={handleChange('password')}\n         onBlur={handleBlur('password')}\n         value={values.password}\n         secureTextEntry\n       />\n         {(errors.password && touched.password) &&\n                    <Text style={styles.errorText}>{errors.password}</Text>\n                  }\n        <Text>{'\\n'}</Text>\n        <Text>{'\\n'}</Text>\n        <Text>{'\\n'}</Text>\n\n       <Button style={styles.button}\n         onPress={handleSubmit}\n         title=\"LOGIN\"\n         disabled={!isValid}\n       />\n     </>\n   )}\n </Formik>\n  </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n\n    loginContainer: {\n      width: '90%',\n      height:'50%',\n      alignSelf: 'center',\n      backgroundColor: 'white',\n      padding: widthPercentageToDP('5%'),\n      elevation: 10,\n      backgroundColor: '#e6e6e6',\n      marginTop:widthPercentageToDP('30%'),\n      borderRadius:widthPercentageToDP('30%')\n    },\n    textInput: {\n        paddingLeft:10,\n        height: widthPercentageToDP('10%'),\n        width: widthPercentageToDP('70%'),\n        alignSelf:'center',\n        borderColor: '#4B0082',\n        borderRadius: widthPercentageToDP('5%'),\n        borderWidth: 1,\n        marginTop: 20,\n        backgroundColor: '#f6f6f6'\n      },\n    errorText: {\n        fontSize: 10,\n        color: 'red',\n      },\n      button:{\n        marginTop:widthPercentageToDP('15%'),\n        width:widthPercentageToDP('60%'),\n        fontSize:widthPercentageToDP('20%'),\n        alignSelf:'center',\n        textAlign:'center',\n        paddingTop:widthPercentageToDP('3%'),\n        height:widthPercentageToDP('10%'),\n        backgroundColor:'#9370DB',\n        color:'white',\n        borderRadius:widthPercentageToDP('20%'),\n        marginLeft:widthPercentageToDP('10%'),\n        overflow:'hidden',\n      }\n  })\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}