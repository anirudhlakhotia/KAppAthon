{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/anirudh/Desktop/KAppAthon/node_modules/react-native-input-spinner/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport { Style } from \"./style\";\nvar defaultColor = \"#3E525F\";\n\nvar InputSpinner = function (_Component) {\n  _inherits(InputSpinner, _Component);\n\n  var _super = _createSuper(InputSpinner);\n\n  function InputSpinner(props) {\n    var _this;\n\n    _classCallCheck(this, InputSpinner);\n\n    _this = _super.call(this, props);\n\n    var spinnerStep = _this.parseNum(_this.props.step);\n\n    if (!_this.typeDecimal() && spinnerStep < 1) {\n      spinnerStep = 1;\n    }\n\n    var min = _this.props.min != null ? _this.parseNum(_this.props.min) : null;\n    var max = _this.props.max != null ? _this.parseNum(_this.props.max) : null;\n    var initialValue = _this.props.initialValue != null && !isNaN(12) ? _this.props.initialValue : _this.props.value;\n    initialValue = _this.parseNum(initialValue);\n    initialValue = _this.adjustValueLimits(initialValue, min, max);\n    _this.state = {\n      min: min,\n      max: max,\n      value: initialValue,\n      step: spinnerStep,\n      focused: false,\n      buttonPress: null\n    };\n    return _this;\n  }\n\n  _createClass(InputSpinner, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        var newValue = this.parseNum(this.props.value);\n        newValue = this.adjustValueLimits(newValue);\n        this.setState({\n          value: newValue\n        });\n      }\n\n      if (this.props.min !== prevProps.min) {\n        this.setState({\n          min: this.props.min != null ? this.parseNum(this.props.min) : null\n        });\n      }\n\n      if (this.props.max !== prevProps.max) {\n        this.setState({\n          max: this.props.max != null ? this.parseNum(this.props.max) : null\n        });\n      }\n\n      if (this.props.step !== prevProps.step) {\n        var spinnerStep = this.parseNum(this.props.step);\n\n        if (!this.typeDecimal() && spinnerStep < 1) {\n          spinnerStep = 1;\n        }\n\n        this.setState({\n          step: spinnerStep\n        });\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(num) {\n      if (this.props.disabled) return;\n      var current_value = this.state.value;\n      var separator = !this.isStringEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\";\n\n      if (String(num).endsWith(separator) && !this.getValue().endsWith(separator + \"0\")) {\n        this.decimalInput = true;\n      }\n\n      num = this.parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\n      if (!this.minReached(num)) {\n        if (this.maxReached(num)) {\n          num = this.state.max;\n\n          if (this.props.onMax) {\n            this.props.onMax(this.state.max);\n          }\n        }\n\n        this.setState({\n          value: num\n        });\n      } else {\n        if (this.props.onMin) {\n          this.props.onMin(this.state.min);\n        }\n\n        num = this.state.min;\n        this.setState({\n          value: num\n        });\n      }\n\n      if (current_value !== num && this.props.onChange) {\n        this.props.onChange(num);\n      }\n    }\n  }, {\n    key: \"onShowUnderlay\",\n    value: function onShowUnderlay(buttonDirection) {\n      this.setState({\n        buttonPress: buttonDirection\n      });\n    }\n  }, {\n    key: \"onHideUnderlay\",\n    value: function onHideUnderlay() {\n      this.setState({\n        buttonPress: null\n      });\n    }\n  }, {\n    key: \"roundNum\",\n    value: function roundNum(num) {\n      if (this.typeDecimal()) {\n        var val = num * Math.pow(10, this.props.precision);\n        var fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\n        if (fraction === -0.5) {\n          fraction = -0.6;\n        }\n\n        val = Math.round(parseInt(val) + fraction) / Math.pow(10, this.props.precision);\n        return val;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"adjustValueLimits\",\n    value: function adjustValueLimits(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (min == null && this.state && this.state.min != null) {\n        min = this.state.min;\n      }\n\n      if (max == null && this.state && this.state.max != null) {\n        min = this.state.max;\n      }\n\n      if (min != null && value < min) {\n        value = Math.min(min, Math.max(value, min));\n      }\n\n      if (max != null && value > max) {\n        value = Math.max(max, Math.min(value, max));\n      }\n\n      return value;\n    }\n  }, {\n    key: \"parseNum\",\n    value: function parseNum(num) {\n      num = String(num).replace(!this.isStringEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\", \".\");\n\n      if (this.typeDecimal()) {\n        num = parseFloat(num);\n      } else {\n        num = parseInt(num);\n      }\n\n      if (isNaN(num)) {\n        num = 0;\n      }\n\n      this.roundNum(num);\n      return num;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this.state.value;\n\n      if (this.typeDecimal() && this.decimalInput) {\n        this.decimalInput = false;\n        value = this.parseNum(value).toFixed(1).replace(/0+$/, \"\");\n      } else if (this.typeDecimal()) {\n        value = String(this.parseNum(this.parseNum(value).toFixed(this.props.precision)));\n      } else {\n        value = String(this.parseNum(value));\n      }\n\n      return value.replace(\".\", !this.isStringEmpty(this.props.decimalSeparator) ? this.props.decimalSeparator : \".\");\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      var type = this.props.type;\n\n      if (this.props.type != null) {\n        type = this.props.type;\n      }\n\n      return String(type).toLowerCase();\n    }\n  }, {\n    key: \"typeDecimal\",\n    value: function typeDecimal() {\n      var type = this.getType();\n      return type === \"float\" || type === \"double\" || type === \"decimal\" || type === \"real\";\n    }\n  }, {\n    key: \"increase\",\n    value: function increase() {\n      if (this._isDisabledButtonRight()) return;\n      var num = this.parseNum(this.state.value) + this.parseNum(this.state.step);\n\n      if (this.props.onIncrease) {\n        var increased_num = num;\n\n        if (this.maxReached(num)) {\n          increased_num = this.state.max;\n        }\n\n        this.props.onIncrease(increased_num);\n      }\n\n      this.onChange(num);\n    }\n  }, {\n    key: \"decrease\",\n    value: function decrease() {\n      if (this._isDisabledButtonLeft()) return;\n      var num = this.parseNum(this.state.value) - this.parseNum(this.state.step);\n\n      if (this.props.onDecrease) {\n        var decreased_num = num;\n\n        if (this.minReached(num)) {\n          decreased_num = this.state.min;\n        }\n\n        this.props.onDecrease(decreased_num);\n      }\n\n      this.onChange(num);\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      if (this.props.onSubmit) {\n        this.props.onSubmit(this.parseNum(e.nativeEvent.text));\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (this.props.onFocus) {\n        this.props.onFocus(e);\n      }\n\n      this.setState({\n        focused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(e) {\n      if (this.props.onBlur) {\n        this.props.onBlur(e);\n      }\n\n      this.setState({\n        focused: false\n      });\n    }\n  }, {\n    key: \"onKeyPress\",\n    value: function onKeyPress(e) {\n      if (this.props.onKeyPress) {\n        this.props.onKeyPress(e);\n      }\n    }\n  }, {\n    key: \"maxReached\",\n    value: function maxReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.max != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num >= this.state.max;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"minReached\",\n    value: function minReached() {\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.state.min != null) {\n        if (num == null) {\n          num = this.state.value;\n        }\n\n        return num <= this.state.min;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.textInput.blur();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.textInput.focus();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.textInput.clear();\n    }\n  }, {\n    key: \"isObjectEmpty\",\n    value: function isObjectEmpty(obj) {\n      return Object.entries(obj).length === 0 && obj.constructor === Object;\n    }\n  }, {\n    key: \"isStringEmpty\",\n    value: function isStringEmpty(str) {\n      return !str || String(str) === \"\";\n    }\n  }, {\n    key: \"isEditable\",\n    value: function isEditable() {\n      return !this.props.disabled && this.props.editable;\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.state.focus;\n    }\n  }, {\n    key: \"_isDisabledButtonLeft\",\n    value: function _isDisabledButtonLeft() {\n      return this.props.disabled || this.props.buttonLeftDisabled;\n    }\n  }, {\n    key: \"_isDisabledButtonRight\",\n    value: function _isDisabledButtonRight() {\n      return this.props.disabled || this.props.buttonRightDisabled;\n    }\n  }, {\n    key: \"_isRightButtonPressed\",\n    value: function _isRightButtonPressed() {\n      return this.state.buttonPress === \"right\";\n    }\n  }, {\n    key: \"_isLeftButtonPressed\",\n    value: function _isLeftButtonPressed() {\n      return this.state.buttonPress === \"left\";\n    }\n  }, {\n    key: \"_getKeyboardType\",\n    value: function _getKeyboardType() {\n      var keyboardType = \"numeric\";\n\n      if (this.typeDecimal()) {\n        keyboardType = \"decimal-pad\";\n      } else {\n        keyboardType = \"number-pad\";\n      }\n\n      return keyboardType;\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor() {\n      return this.maxReached() ? this._getColorMax() : this.minReached() ? this._getColorMin() : this.props.color;\n    }\n  }, {\n    key: \"_getColorMin\",\n    value: function _getColorMin() {\n      if (!this.props.colorMin) {\n        return this.props.color;\n      }\n\n      return this.props.colorMin;\n    }\n  }, {\n    key: \"_getColorMax\",\n    value: function _getColorMax() {\n      if (!this.props.colorMax) {\n        return this.props.color;\n      }\n\n      return this.props.colorMax;\n    }\n  }, {\n    key: \"_getColorPress\",\n    value: function _getColorPress() {\n      var color = this.props.colorPress !== defaultColor ? this.props.colorPress : this.props.color;\n      return this.maxReached() ? this._getColorMax() : this.minReached() ? this._getColorMin() : color;\n    }\n  }, {\n    key: \"_getColorPressText\",\n    value: function _getColorPressText() {\n      return this.props.buttonPressTextColor !== this.props.buttonTextColor ? this.props.buttonPressTextColor : this.props.buttonTextColor;\n    }\n  }, {\n    key: \"_getColorLeftButton\",\n    value: function _getColorLeftButton() {\n      var color = this._getColor();\n\n      return this.props.colorLeft !== defaultColor ? this.props.colorLeft : color;\n    }\n  }, {\n    key: \"_getColorRightButton\",\n    value: function _getColorRightButton() {\n      var color = this._getColor();\n\n      return this.props.colorRight !== defaultColor ? this.props.colorRight : color;\n    }\n  }, {\n    key: \"_getContainerStyle\",\n    value: function _getContainerStyle() {\n      return [Style.container, {\n        borderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n        width: this.props.width\n      }, this.props.style];\n    }\n  }, {\n    key: \"_getInputTextStyle\",\n    value: function _getInputTextStyle() {\n      return [Style.numberText, {\n        color: this.props.textColor,\n        fontSize: this.props.fontSize,\n        fontFamily: this.props.fontFamily,\n        borderColor: this.props.showBorder ? this._getColor() : \"transparent\",\n        backgroundColor: this.props.background,\n        height: this.props.height\n      }, this.props.inputStyle];\n    }\n  }, {\n    key: \"_getStyleButton\",\n    value: function _getStyleButton() {\n      var size = this.props.height;\n      return {\n        height: size,\n        width: size\n      };\n    }\n  }, {\n    key: \"_getStyleButtonPress\",\n    value: function _getStyleButtonPress() {\n      return this.isObjectEmpty(this.props.buttonPressStyle) ? this.props.buttonStyle : this.props.buttonPressStyle;\n    }\n  }, {\n    key: \"_getStyleButtonText\",\n    value: function _getStyleButtonText() {\n      return [Style.buttonText, {\n        fontSize: this.props.buttonFontSize,\n        fontFamily: this.props.buttonFontFamily\n      }];\n    }\n  }, {\n    key: \"_getStyleLeftButtonText\",\n    value: function _getStyleLeftButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isLeftButtonPressed() ? this._getColorPressText() : this.props.buttonTextColor\n      }];\n    }\n  }, {\n    key: \"_getStyleRightButtonText\",\n    value: function _getStyleRightButtonText() {\n      return [Style.buttonText, this._getStyleButtonText(), {\n        color: this._isRightButtonPressed() ? this._getColorPressText() : this.props.buttonTextColor\n      }];\n    }\n  }, {\n    key: \"_renderLeftButtonElement\",\n    value: function _renderLeftButtonElement() {\n      if (this.props.buttonLeftImage) {\n        return this.props.buttonLeftImage;\n      } else if (this._isLeftButtonPressed() && this.props.buttonPressLeftImage) {\n        return this.props.buttonPressLeftImage;\n      } else {\n        var text = this.props.arrows !== false ? \"<\" : this.props.buttonLeftText ? this.props.buttonLeftText : \"-\";\n        return React.createElement(Text, {\n          style: this._getStyleLeftButtonText(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 11\n          }\n        }, text);\n      }\n    }\n  }, {\n    key: \"_renderRightButtonElement\",\n    value: function _renderRightButtonElement() {\n      if (this.props.buttonRightImage) {\n        return this.props.buttonRightImage;\n      } else if (this._isRightButtonPressed() && this.props.buttonPressRightImage) {\n        return this.props.buttonPressRightImage;\n      } else {\n        var text = this.props.arrows !== false ? \">\" : this.props.buttonRightText ? this.props.buttonRightText : \"+\";\n        return React.createElement(Text, {\n          style: this._getStyleRightButtonText(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 11\n          }\n        }, text);\n      }\n    }\n  }, {\n    key: \"_renderLeftButton\",\n    value: function _renderLeftButton() {\n      var _this2 = this;\n\n      var colorLeft = this._getColorLeftButton();\n\n      var buttonStyle = [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorLeft : \"transparent\",\n        backgroundColor: colorLeft\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonLeft, this._isLeftButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle];\n      return React.createElement(TouchableHighlight, {\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"left\"),\n        disabled: this._isDisabledButtonLeft(),\n        style: buttonStyle,\n        onPress: function onPress() {\n          return _this2.decrease();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 4\n        }\n      }, this._renderLeftButtonElement());\n    }\n  }, {\n    key: \"_renderRightButton\",\n    value: function _renderRightButton() {\n      var _this3 = this;\n\n      var colorRight = this._getColorRightButton();\n\n      var buttonStyle = [this._getStyleButton(), {\n        borderColor: this.props.showBorder ? colorRight : \"transparent\",\n        backgroundColor: colorRight\n      }, this.props.rounded ? Style.buttonRounded : Style.buttonRight, this._isRightButtonPressed() ? this._getStyleButtonPress() : this.props.buttonStyle];\n      return React.createElement(TouchableHighlight, {\n        activeOpacity: this.props.activeOpacity,\n        underlayColor: this._getColorPress(),\n        onHideUnderlay: this.onHideUnderlay.bind(this),\n        onShowUnderlay: this.onShowUnderlay.bind(this, \"right\"),\n        disabled: this._isDisabledButtonRight(),\n        style: buttonStyle,\n        onPress: function onPress() {\n          return _this3.increase();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 4\n        }\n      }, this._renderRightButtonElement());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: this._getContainerStyle(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 4\n        }\n      }, this._renderLeftButton(), this.props.prepend, React.createElement(TextInput, {\n        ref: function ref(input) {\n          return _this4.textInput = input;\n        },\n        style: this._getInputTextStyle(),\n        value: this.getValue(),\n        selectionColor: this.props.selectionColor,\n        selectTextOnFocus: this.props.selectTextOnFocus,\n        returnKeyType: this.props.returnKeyType,\n        returnKeyLabel: this.props.returnKeyLabel,\n        autofocus: this.props.autofocus,\n        editable: this.isEditable(),\n        maxLength: this.props.maxLength,\n        onKeyPress: this.onKeyPress.bind(this),\n        onFocus: this.onFocus.bind(this),\n        onBlur: this.onBlur.bind(this),\n        keyboardType: this._getKeyboardType(),\n        onChangeText: this.onChange.bind(this),\n        onSubmitEditing: this.onSubmit.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 5\n        }\n      }), this.props.children, this.props.append, this._renderRightButton());\n    }\n  }]);\n\n  return InputSpinner;\n}(Component);\n\nInputSpinner.propTypes = {\n  type: PropTypes.string,\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  precision: PropTypes.number,\n  rounded: PropTypes.bool,\n  activeOpacity: PropTypes.number,\n  color: PropTypes.string,\n  colorPress: PropTypes.string,\n  colorRight: PropTypes.string,\n  colorLeft: PropTypes.string,\n  colorMax: PropTypes.string,\n  colorMin: PropTypes.string,\n  background: PropTypes.string,\n  textColor: PropTypes.string,\n  arrows: PropTypes.bool,\n  showBorder: PropTypes.bool,\n  fontSize: PropTypes.number,\n  fontFamily: PropTypes.string,\n  buttonFontSize: PropTypes.number,\n  buttonFontFamily: PropTypes.string,\n  buttonTextColor: PropTypes.string,\n  maxLength: PropTypes.number,\n  disabled: PropTypes.bool,\n  editable: PropTypes.bool,\n  autofocus: PropTypes.bool,\n  selectTextOnFocus: PropTypes.bool,\n  selectionColor: PropTypes.string,\n  returnKeyLabel: PropTypes.string,\n  returnKeyType: PropTypes.string,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onMin: PropTypes.func,\n  onMax: PropTypes.func,\n  onIncrease: PropTypes.func,\n  onDecrease: PropTypes.func,\n  onSubmit: PropTypes.func,\n  buttonLeftDisabled: PropTypes.bool,\n  buttonRightDisabled: PropTypes.bool,\n  buttonLeftText: PropTypes.string,\n  buttonRightText: PropTypes.string,\n  buttonLeftImage: PropTypes.element,\n  buttonRightImage: PropTypes.element,\n  buttonPressLeftImage: PropTypes.element,\n  buttonPressRightImage: PropTypes.element,\n  buttonStyle: PropTypes.object,\n  buttonPressStyle: PropTypes.object,\n  inputStyle: PropTypes.object,\n  style: PropTypes.object,\n  append: PropTypes.element,\n  prepend: PropTypes.element,\n  decimalSeparator: PropTypes.string\n};\nInputSpinner.defaultProps = {\n  type: \"int\",\n  min: 0,\n  max: null,\n  value: 0,\n  initialValue: null,\n  step: 1,\n  precision: 2,\n  rounded: true,\n  activeOpacity: 0.85,\n  color: defaultColor,\n  colorPress: defaultColor,\n  colorRight: defaultColor,\n  colorLeft: defaultColor,\n  background: \"transparent\",\n  textColor: \"#000000\",\n  arrows: false,\n  showBorder: false,\n  fontSize: 14,\n  fontFamily: null,\n  buttonFontSize: 25,\n  buttonFontFamily: null,\n  buttonTextColor: \"#FFFFFF\",\n  buttonPressTextColor: \"#FFFFFF\",\n  maxLength: null,\n  disabled: false,\n  editable: true,\n  autofocus: false,\n  selectTextOnFocus: null,\n  selectionColor: null,\n  returnKeyLabel: null,\n  returnKeyType: null,\n  width: 150,\n  height: 50,\n  buttonLeftDisabled: false,\n  buttonRightDisabled: false,\n  buttonLeftText: null,\n  buttonRightText: null,\n  buttonStyle: {},\n  buttonPressStyle: {},\n  inputStyle: {},\n  style: {},\n  decimalSeparator: \".\"\n};\nexport default InputSpinner;","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/node_modules/react-native-input-spinner/index.js"],"names":["React","Component","PropTypes","Style","defaultColor","InputSpinner","props","spinnerStep","parseNum","step","typeDecimal","min","max","initialValue","isNaN","value","adjustValueLimits","state","focused","buttonPress","prevProps","newValue","setState","num","disabled","current_value","separator","isStringEmpty","decimalSeparator","String","endsWith","getValue","decimalInput","replace","minReached","maxReached","onMax","onMin","onChange","buttonDirection","val","Math","pow","precision","fraction","round","parseInt","parseFloat","roundNum","toFixed","type","toLowerCase","getType","_isDisabledButtonRight","onIncrease","increased_num","_isDisabledButtonLeft","onDecrease","decreased_num","e","onSubmit","nativeEvent","text","onFocus","onBlur","onKeyPress","textInput","blur","focus","clear","obj","Object","entries","length","constructor","str","editable","buttonLeftDisabled","buttonRightDisabled","keyboardType","_getColorMax","_getColorMin","color","colorMin","colorMax","colorPress","buttonPressTextColor","buttonTextColor","_getColor","colorLeft","colorRight","container","borderColor","showBorder","width","style","numberText","textColor","fontSize","fontFamily","backgroundColor","background","height","inputStyle","size","isObjectEmpty","buttonPressStyle","buttonStyle","buttonText","buttonFontSize","buttonFontFamily","_getStyleButtonText","_isLeftButtonPressed","_getColorPressText","_isRightButtonPressed","buttonLeftImage","buttonPressLeftImage","arrows","buttonLeftText","_getStyleLeftButtonText","buttonRightImage","buttonPressRightImage","buttonRightText","_getStyleRightButtonText","_getColorLeftButton","_getStyleButton","rounded","buttonRounded","buttonLeft","_getStyleButtonPress","activeOpacity","_getColorPress","onHideUnderlay","bind","onShowUnderlay","decrease","_renderLeftButtonElement","_getColorRightButton","buttonRight","increase","_renderRightButtonElement","_getContainerStyle","_renderLeftButton","prepend","input","_getInputTextStyle","selectionColor","selectTextOnFocus","returnKeyType","returnKeyLabel","autofocus","isEditable","maxLength","_getKeyboardType","children","append","_renderRightButton","propTypes","string","oneOfType","number","bool","func","element","object","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Text, TextInput, TouchableHighlight, View} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport {Style} from \"./style\";\n\n/**\n * Default Color\n * @type {string}\n */\nconst defaultColor = \"#3E525F\";\n\n/**\n * Input Spinner\n * @author Marco Cesarato <cesarato.developer@gmail.com>\n */\nclass InputSpinner extends Component {\n\t/**\n\t * Constructor\n\t * @param props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tlet spinnerStep = this.parseNum(this.props.step);\n\t\tif (!this.typeDecimal() && spinnerStep < 1) {\n\t\t\tspinnerStep = 1;\n\t\t}\n\n\t\tconst min =\n\t\t\tthis.props.min != null ? this.parseNum(this.props.min) : null;\n\t\tconst max =\n\t\t\tthis.props.max != null ? this.parseNum(this.props.max) : null;\n\n\t\tlet initialValue =\n\t\t\tthis.props.initialValue != null && !isNaN(12)\n\t\t\t\t? this.props.initialValue\n\t\t\t\t: this.props.value;\n\t\tinitialValue = this.parseNum(initialValue);\n\t\tinitialValue = this.adjustValueLimits(initialValue, min, max);\n\n\t\tthis.state = {\n\t\t\tmin: min,\n\t\t\tmax: max,\n\t\t\tvalue: initialValue,\n\t\t\tstep: spinnerStep,\n\t\t\tfocused: false,\n\t\t\tbuttonPress: null,\n\t\t};\n\t}\n\n\t/**\n\t * Component did update\n\t * @param prevProps\n\t * @returns {*}\n\t */\n\tcomponentDidUpdate(prevProps) {\n\t\t// Parse Value\n\t\tif (this.props.value !== prevProps.value) {\n\t\t\tlet newValue = this.parseNum(this.props.value);\n\t\t\tnewValue = this.adjustValueLimits(newValue);\n\t\t\tthis.setState({value: newValue});\n\t\t}\n\t\t// Parse Min\n\t\tif (this.props.min !== prevProps.min) {\n\t\t\tthis.setState({\n\t\t\t\tmin:\n\t\t\t\t\tthis.props.min != null\n\t\t\t\t\t\t? this.parseNum(this.props.min)\n\t\t\t\t\t\t: null,\n\t\t\t});\n\t\t}\n\t\t// Parse Max\n\t\tif (this.props.max !== prevProps.max) {\n\t\t\tthis.setState({\n\t\t\t\tmax:\n\t\t\t\t\tthis.props.max != null\n\t\t\t\t\t\t? this.parseNum(this.props.max)\n\t\t\t\t\t\t: null,\n\t\t\t});\n\t\t}\n\t\t// Parse Step\n\t\tif (this.props.step !== prevProps.step) {\n\t\t\tlet spinnerStep = this.parseNum(this.props.step);\n\t\t\tif (!this.typeDecimal() && spinnerStep < 1) {\n\t\t\t\tspinnerStep = 1;\n\t\t\t}\n\t\t\tthis.setState({step: spinnerStep});\n\t\t}\n\t}\n\n\t/**\n\t * On value change\n\t * @param num\n\t */\n\tonChange(num) {\n\t\tif (this.props.disabled) return;\n\t\tconst current_value = this.state.value;\n\t\tconst separator = !this.isStringEmpty(this.props.decimalSeparator)\n\t\t\t? this.props.decimalSeparator\n\t\t\t: \".\";\n\t\tif (\n\t\t\tString(num).endsWith(separator) &&\n\t\t\t!this.getValue().endsWith(separator + \"0\")\n\t\t) {\n\t\t\tthis.decimalInput = true;\n\t\t}\n\t\tnum = this.parseNum(String(num).replace(/^0+/, \"\")) || 0;\n\t\tif (!this.minReached(num)) {\n\t\t\tif (this.maxReached(num)) {\n\t\t\t\tnum = this.state.max;\n\t\t\t\tif (this.props.onMax) {\n\t\t\t\t\tthis.props.onMax(this.state.max);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState({value: num});\n\t\t} else {\n\t\t\tif (this.props.onMin) {\n\t\t\t\tthis.props.onMin(this.state.min);\n\t\t\t}\n\t\t\tnum = this.state.min;\n\t\t\tthis.setState({value: num});\n\t\t}\n\t\tif (current_value !== num && this.props.onChange) {\n\t\t\tthis.props.onChange(num);\n\t\t}\n\t}\n\n\t/**\n\t * On Button Press\n\t * @param buttonDirection\n\t */\n\tonShowUnderlay(buttonDirection) {\n\t\tthis.setState({buttonPress: buttonDirection});\n\t}\n\n\t/**\n\t * On Button Unpress\n\t */\n\tonHideUnderlay() {\n\t\tthis.setState({buttonPress: null});\n\t}\n\n\t/**\n\t * Round number to props precision\n\t * @param num\n\t */\n\troundNum(num) {\n\t\tif (this.typeDecimal()) {\n\t\t\tlet val = num * Math.pow(10, this.props.precision);\n\t\t\tlet fraction = Math.round((val - parseInt(val)) * 10) / 10;\n\t\t\tif (fraction === -0.5) {\n\t\t\t\tfraction = -0.6;\n\t\t\t}\n\t\t\tval =\n\t\t\t\tMath.round(parseInt(val) + fraction) /\n\t\t\t\tMath.pow(10, this.props.precision);\n\t\t\treturn val;\n\t\t}\n\t\treturn num;\n\t}\n\n\tadjustValueLimits(value, min = null, max = null) {\n\t\tif (min == null && this.state && this.state.min != null) {\n\t\t\tmin = this.state.min;\n\t\t}\n\t\tif (max == null && this.state && this.state.max != null) {\n\t\t\tmin = this.state.max;\n\t\t}\n\t\tif (min != null && value < min) {\n\t\t\tvalue = Math.min(min, Math.max(value, min));\n\t\t}\n\t\tif (max != null && value > max) {\n\t\t\tvalue = Math.max(max, Math.min(value, max));\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Parse number type\n\t * @param num\n\t * @returns {*}\n\t */\n\tparseNum(num) {\n\t\tnum = String(num).replace(\n\t\t\t!this.isStringEmpty(this.props.decimalSeparator)\n\t\t\t\t? this.props.decimalSeparator\n\t\t\t\t: \".\",\n\t\t\t\".\"\n\t\t);\n\t\tif (this.typeDecimal()) {\n\t\t\tnum = parseFloat(num);\n\t\t} else {\n\t\t\tnum = parseInt(num);\n\t\t}\n\t\tif (isNaN(num)) {\n\t\t\tnum = 0;\n\t\t}\n\t\tthis.roundNum(num);\n\t\treturn num;\n\t}\n\n\t/**\n\t * Convert value to string\n\t * @returns {string}\n\t */\n\tgetValue() {\n\t\tlet value = this.state.value;\n\t\tif (this.typeDecimal() && this.decimalInput) {\n\t\t\tthis.decimalInput = false;\n\t\t\tvalue = this.parseNum(value).toFixed(1).replace(/0+$/, \"\");\n\t\t} else if (this.typeDecimal()) {\n\t\t\tvalue = String(\n\t\t\t\tthis.parseNum(\n\t\t\t\t\tthis.parseNum(value).toFixed(this.props.precision)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tvalue = String(this.parseNum(value));\n\t\t}\n\t\treturn value.replace(\n\t\t\t\".\",\n\t\t\t!this.isStringEmpty(this.props.decimalSeparator)\n\t\t\t\t? this.props.decimalSeparator\n\t\t\t\t: \".\"\n\t\t);\n\t}\n\n\t/**\n\t * Get Type\n\t * @returns {String}\n\t */\n\tgetType() {\n\t\tlet type = this.props.type;\n\t\tif (this.props.type != null) {\n\t\t\ttype = this.props.type;\n\t\t}\n\t\treturn String(type).toLowerCase();\n\t}\n\n\t/**\n\t * Detect if type is decimal\n\t * @returns {boolean}\n\t */\n\ttypeDecimal() {\n\t\tlet type = this.getType();\n\t\treturn (\n\t\t\ttype === \"float\" ||\n\t\t\ttype === \"double\" ||\n\t\t\ttype === \"decimal\" ||\n\t\t\ttype === \"real\"\n\t\t);\n\t}\n\n\t/**\n\t * Increase\n\t */\n\tincrease() {\n\t\tif (this._isDisabledButtonRight()) return;\n\t\tlet num =\n\t\t\tthis.parseNum(this.state.value) + this.parseNum(this.state.step);\n\t\tif (this.props.onIncrease) {\n\t\t\tlet increased_num = num;\n\t\t\tif (this.maxReached(num)) {\n\t\t\t\tincreased_num = this.state.max;\n\t\t\t}\n\t\t\tthis.props.onIncrease(increased_num);\n\t\t}\n\t\tthis.onChange(num);\n\t}\n\n\t/**\n\t * Decrease\n\t */\n\tdecrease() {\n\t\tif (this._isDisabledButtonLeft()) return;\n\t\tlet num =\n\t\t\tthis.parseNum(this.state.value) - this.parseNum(this.state.step);\n\t\tif (this.props.onDecrease) {\n\t\t\tlet decreased_num = num;\n\t\t\tif (this.minReached(num)) {\n\t\t\t\tdecreased_num = this.state.min;\n\t\t\t}\n\t\t\tthis.props.onDecrease(decreased_num);\n\t\t}\n\t\tthis.onChange(num);\n\t}\n\n\t/**\n\t * On Submit keyboard\n\t * @returns {*}\n\t * @param e\n\t */\n\tonSubmit(e) {\n\t\tif (this.props.onSubmit) {\n\t\t\tthis.props.onSubmit(this.parseNum(e.nativeEvent.text));\n\t\t}\n\t}\n\n\t/**\n\t * On Focus\n\t * @returns {*}\n\t * @param e\n\t */\n\tonFocus(e) {\n\t\tif (this.props.onFocus) {\n\t\t\tthis.props.onFocus(e);\n\t\t}\n\t\tthis.setState({focused: true});\n\t}\n\n\t/**\n\t * On Blur\n\t * @returns {*}\n\t * @param e\n\t */\n\tonBlur(e) {\n\t\tif (this.props.onBlur) {\n\t\t\tthis.props.onBlur(e);\n\t\t}\n\t\tthis.setState({focused: false});\n\t}\n\n\t/**\n\t * On Key Press\n\t * @returns {*}\n\t * @param e\n\t */\n\tonKeyPress(e) {\n\t\tif (this.props.onKeyPress) {\n\t\t\tthis.props.onKeyPress(e);\n\t\t}\n\t}\n\n\t/**\n\t * Max is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tmaxReached(num = null) {\n\t\tif (this.state.max != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num >= this.state.max;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Min is reached\n\t * @param num\n\t * @returns {boolean}\n\t */\n\tminReached(num = null) {\n\t\tif (this.state.min != null) {\n\t\t\tif (num == null) {\n\t\t\t\tnum = this.state.value;\n\t\t\t}\n\t\t\treturn num <= this.state.min;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Blur\n\t */\n\tblur() {\n\t\tthis.textInput.blur();\n\t}\n\n\t/**\n\t * Focus\n\t */\n\tfocus() {\n\t\tthis.textInput.focus();\n\t}\n\n\t/**\n\t * Clear\n\t */\n\tclear() {\n\t\tthis.textInput.clear();\n\t}\n\n\t/**\n\t * Is object empty\n\t * @param obj\n\t * @returns {boolean}\n\t */\n\tisObjectEmpty(obj) {\n\t\treturn Object.entries(obj).length === 0 && obj.constructor === Object;\n\t}\n\n\t/**\n\t * Is string empty\n\t * @param str\n\t * @returns {boolean|boolean}\n\t */\n\tisStringEmpty(str) {\n\t\treturn !str || String(str) === \"\";\n\t}\n\n\t/**\n\t * Is text input editable\n\t * @returns {boolean|Boolean}\n\t */\n\tisEditable() {\n\t\treturn !this.props.disabled && this.props.editable;\n\t}\n\n\t/**\n\t * Is text input focused\n\t * @returns {boolean|Boolean}\n\t */\n\tisFocused() {\n\t\treturn this.state.focus;\n\t}\n\n\t/**\n\t * Is left button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonLeft() {\n\t\treturn this.props.disabled || this.props.buttonLeftDisabled;\n\t}\n\n\t/**\n\t * Is right button disabled\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isDisabledButtonRight() {\n\t\treturn this.props.disabled || this.props.buttonRightDisabled;\n\t}\n\n\t/**\n\t * Is right button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isRightButtonPressed() {\n\t\treturn this.state.buttonPress === \"right\";\n\t}\n\n\t/**\n\t * Is left button pressed\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isLeftButtonPressed() {\n\t\treturn this.state.buttonPress === \"left\";\n\t}\n\n\t/**\n\t * Get keyboard type\n\t * @returns {string}\n\t * @private\n\t */\n\t_getKeyboardType() {\n\t\t// Keyboard type\n\t\tlet keyboardType = \"numeric\";\n\t\tif (this.typeDecimal()) {\n\t\t\tkeyboardType = \"decimal-pad\";\n\t\t} else {\n\t\t\tkeyboardType = \"number-pad\";\n\t\t}\n\t\treturn keyboardType;\n\t}\n\n\t/**\n\t * Get main color\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColor() {\n\t\treturn this.maxReached()\n\t\t\t? this._getColorMax()\n\t\t\t: this.minReached()\n\t\t\t? this._getColorMin()\n\t\t\t: this.props.color;\n\t}\n\n\t/**\n\t * Get min color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMin() {\n\t\tif (!this.props.colorMin) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMin;\n\t}\n\n\t/**\n\t * Get max color\n\t * @returns {String}\n\t * @private\n\t */\n\t_getColorMax() {\n\t\tif (!this.props.colorMax) {\n\t\t\treturn this.props.color;\n\t\t}\n\t\treturn this.props.colorMax;\n\t}\n\n\t/**\n\t * Get color on button press\n\t * @returns {String|*}\n\t * @private\n\t */\n\t_getColorPress() {\n\t\tconst color =\n\t\t\tthis.props.colorPress !== defaultColor\n\t\t\t\t? this.props.colorPress\n\t\t\t\t: this.props.color;\n\t\treturn this.maxReached()\n\t\t\t? this._getColorMax()\n\t\t\t: this.minReached()\n\t\t\t? this._getColorMin()\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get color text on button press\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorPressText() {\n\t\treturn this.props.buttonPressTextColor !== this.props.buttonTextColor\n\t\t\t? this.props.buttonPressTextColor\n\t\t\t: this.props.buttonTextColor;\n\t}\n\n\t/**\n\t * Get left button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorLeftButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorLeft !== defaultColor\n\t\t\t? this.props.colorLeft\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get right button color\n\t * @returns {string}\n\t * @private\n\t */\n\t_getColorRightButton() {\n\t\tconst color = this._getColor();\n\t\treturn this.props.colorRight !== defaultColor\n\t\t\t? this.props.colorRight\n\t\t\t: color;\n\t}\n\n\t/**\n\t * Get container style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getContainerStyle() {\n\t\treturn [\n\t\t\tStyle.container,\n\t\t\t{\n\t\t\t\tborderColor: this.props.showBorder\n\t\t\t\t\t? this._getColor()\n\t\t\t\t\t: \"transparent\",\n\t\t\t\twidth: this.props.width,\n\t\t\t},\n\t\t\tthis.props.style,\n\t\t];\n\t}\n\n\t/**\n\t * Get input text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getInputTextStyle() {\n\t\treturn [\n\t\t\tStyle.numberText,\n\t\t\t{\n\t\t\t\tcolor: this.props.textColor,\n\t\t\t\tfontSize: this.props.fontSize,\n\t\t\t\tfontFamily: this.props.fontFamily,\n\t\t\t\tborderColor: this.props.showBorder\n\t\t\t\t\t? this._getColor()\n\t\t\t\t\t: \"transparent\",\n\t\t\t\tbackgroundColor: this.props.background,\n\t\t\t\theight: this.props.height,\n\t\t\t},\n\t\t\tthis.props.inputStyle,\n\t\t];\n\t}\n\n\t/**\n\t * Get button style\n\t * @returns {*}\n\t * @private\n\t */\n\t_getStyleButton() {\n\t\tconst size = this.props.height;\n\t\treturn {\n\t\t\theight: size,\n\t\t\twidth: size,\n\t\t};\n\t}\n\n\t/**\n\t * Get button pressed style\n\t * @returns {Object}\n\t * @private\n\t */\n\t_getStyleButtonPress() {\n\t\treturn this.isObjectEmpty(this.props.buttonPressStyle)\n\t\t\t? this.props.buttonStyle\n\t\t\t: this.props.buttonPressStyle;\n\t}\n\n\t/**\n\t * Get button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\t{\n\t\t\t\tfontSize: this.props.buttonFontSize,\n\t\t\t\tfontFamily: this.props.buttonFontFamily,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Get left button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleLeftButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isLeftButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this.props.buttonTextColor,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Get right button text style\n\t * @returns {*[]}\n\t * @private\n\t */\n\t_getStyleRightButtonText() {\n\t\treturn [\n\t\t\tStyle.buttonText,\n\t\t\tthis._getStyleButtonText(),\n\t\t\t{\n\t\t\t\tcolor: this._isRightButtonPressed()\n\t\t\t\t\t? this._getColorPressText()\n\t\t\t\t\t: this.props.buttonTextColor,\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * Render left button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButtonElement() {\n\t\tif (this.props.buttonLeftImage) {\n\t\t\treturn this.props.buttonLeftImage;\n\t\t} else if (\n\t\t\tthis._isLeftButtonPressed() &&\n\t\t\tthis.props.buttonPressLeftImage\n\t\t) {\n\t\t\treturn this.props.buttonPressLeftImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \"<\"\n\t\t\t\t\t: this.props.buttonLeftText\n\t\t\t\t\t? this.props.buttonLeftText\n\t\t\t\t\t: \"-\";\n\t\t\treturn <Text style={this._getStyleLeftButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render right button element\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButtonElement() {\n\t\tif (this.props.buttonRightImage) {\n\t\t\treturn this.props.buttonRightImage;\n\t\t} else if (\n\t\t\tthis._isRightButtonPressed() &&\n\t\t\tthis.props.buttonPressRightImage\n\t\t) {\n\t\t\treturn this.props.buttonPressRightImage;\n\t\t} else {\n\t\t\tconst text =\n\t\t\t\tthis.props.arrows !== false\n\t\t\t\t\t? \">\"\n\t\t\t\t\t: this.props.buttonRightText\n\t\t\t\t\t? this.props.buttonRightText\n\t\t\t\t\t: \"+\";\n\t\t\treturn <Text style={this._getStyleRightButtonText()}>{text}</Text>;\n\t\t}\n\t}\n\n\t/**\n\t * Render left button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderLeftButton() {\n\t\tconst colorLeft = this._getColorLeftButton();\n\n\t\tconst buttonStyle = [\n\t\t\tthis._getStyleButton(),\n\t\t\t{\n\t\t\t\tborderColor: this.props.showBorder ? colorLeft : \"transparent\",\n\t\t\t\tbackgroundColor: colorLeft,\n\t\t\t},\n\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonLeft,\n\t\t\tthis._isLeftButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t];\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"left\")}\n\t\t\t\tdisabled={this._isDisabledButtonLeft()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPress={() => this.decrease()}>\n\t\t\t\t{this._renderLeftButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render right button\n\t * @returns {*}\n\t * @private\n\t */\n\t_renderRightButton() {\n\t\tconst colorRight = this._getColorRightButton();\n\n\t\tconst buttonStyle = [\n\t\t\tthis._getStyleButton(),\n\t\t\t{\n\t\t\t\tborderColor: this.props.showBorder ? colorRight : \"transparent\",\n\t\t\t\tbackgroundColor: colorRight,\n\t\t\t},\n\t\t\tthis.props.rounded ? Style.buttonRounded : Style.buttonRight,\n\t\t\tthis._isRightButtonPressed()\n\t\t\t\t? this._getStyleButtonPress()\n\t\t\t\t: this.props.buttonStyle,\n\t\t];\n\n\t\treturn (\n\t\t\t<TouchableHighlight\n\t\t\t\tactiveOpacity={this.props.activeOpacity}\n\t\t\t\tunderlayColor={this._getColorPress()}\n\t\t\t\tonHideUnderlay={this.onHideUnderlay.bind(this)}\n\t\t\t\tonShowUnderlay={this.onShowUnderlay.bind(this, \"right\")}\n\t\t\t\tdisabled={this._isDisabledButtonRight()}\n\t\t\t\tstyle={buttonStyle}\n\t\t\t\tonPress={() => this.increase()}>\n\t\t\t\t{this._renderRightButtonElement()}\n\t\t\t</TouchableHighlight>\n\t\t);\n\t}\n\n\t/**\n\t * Render\n\t * @returns {*}\n\t */\n\trender() {\n\t\treturn (\n\t\t\t<View style={this._getContainerStyle()}>\n\t\t\t\t{this._renderLeftButton()}\n\n\t\t\t\t{this.props.prepend}\n\n\t\t\t\t<TextInput\n\t\t\t\t\tref={(input) => (this.textInput = input)}\n\t\t\t\t\tstyle={this._getInputTextStyle()}\n\t\t\t\t\tvalue={this.getValue()}\n\t\t\t\t\tselectionColor={this.props.selectionColor}\n\t\t\t\t\tselectTextOnFocus={this.props.selectTextOnFocus}\n\t\t\t\t\treturnKeyType={this.props.returnKeyType}\n\t\t\t\t\treturnKeyLabel={this.props.returnKeyLabel}\n\t\t\t\t\tautofocus={this.props.autofocus}\n\t\t\t\t\teditable={this.isEditable()}\n\t\t\t\t\tmaxLength={this.props.maxLength}\n\t\t\t\t\tonKeyPress={this.onKeyPress.bind(this)}\n\t\t\t\t\tonFocus={this.onFocus.bind(this)}\n\t\t\t\t\tonBlur={this.onBlur.bind(this)}\n\t\t\t\t\tkeyboardType={this._getKeyboardType()}\n\t\t\t\t\tonChangeText={this.onChange.bind(this)}\n\t\t\t\t\tonSubmitEditing={this.onSubmit.bind(this)}\n\t\t\t\t/>\n\n\t\t\t\t{this.props.children}\n\t\t\t\t{this.props.append}\n\n\t\t\t\t{this._renderRightButton()}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nInputSpinner.propTypes = {\n\ttype: PropTypes.string,\n\tmin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tmax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tstep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tprecision: PropTypes.number,\n\trounded: PropTypes.bool,\n\tactiveOpacity: PropTypes.number,\n\tcolor: PropTypes.string,\n\tcolorPress: PropTypes.string,\n\tcolorRight: PropTypes.string,\n\tcolorLeft: PropTypes.string,\n\tcolorMax: PropTypes.string,\n\tcolorMin: PropTypes.string,\n\tbackground: PropTypes.string,\n\ttextColor: PropTypes.string,\n\tarrows: PropTypes.bool,\n\tshowBorder: PropTypes.bool,\n\tfontSize: PropTypes.number,\n\tfontFamily: PropTypes.string,\n\tbuttonFontSize: PropTypes.number,\n\tbuttonFontFamily: PropTypes.string,\n\tbuttonTextColor: PropTypes.string,\n\tmaxLength: PropTypes.number,\n\tdisabled: PropTypes.bool,\n\teditable: PropTypes.bool,\n\tautofocus: PropTypes.bool,\n\tselectTextOnFocus: PropTypes.bool,\n\tselectionColor: PropTypes.string,\n\treturnKeyLabel: PropTypes.string,\n\treturnKeyType: PropTypes.string,\n\twidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\theight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tonChange: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonBlur: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonMin: PropTypes.func,\n\tonMax: PropTypes.func,\n\tonIncrease: PropTypes.func,\n\tonDecrease: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\tbuttonLeftDisabled: PropTypes.bool,\n\tbuttonRightDisabled: PropTypes.bool,\n\tbuttonLeftText: PropTypes.string,\n\tbuttonRightText: PropTypes.string,\n\tbuttonLeftImage: PropTypes.element,\n\tbuttonRightImage: PropTypes.element,\n\tbuttonPressLeftImage: PropTypes.element,\n\tbuttonPressRightImage: PropTypes.element,\n\tbuttonStyle: PropTypes.object,\n\tbuttonPressStyle: PropTypes.object,\n\tinputStyle: PropTypes.object,\n\tstyle: PropTypes.object,\n\tappend: PropTypes.element,\n\tprepend: PropTypes.element,\n\tdecimalSeparator: PropTypes.string,\n};\n\nInputSpinner.defaultProps = {\n\ttype: \"int\",\n\tmin: 0,\n\tmax: null,\n\tvalue: 0,\n\tinitialValue: null,\n\tstep: 1,\n\tprecision: 2,\n\trounded: true,\n\tactiveOpacity: 0.85,\n\tcolor: defaultColor,\n\tcolorPress: defaultColor,\n\tcolorRight: defaultColor,\n\tcolorLeft: defaultColor,\n\tbackground: \"transparent\",\n\ttextColor: \"#000000\",\n\tarrows: false,\n\tshowBorder: false,\n\tfontSize: 14,\n\tfontFamily: null,\n\tbuttonFontSize: 25,\n\tbuttonFontFamily: null,\n\tbuttonTextColor: \"#FFFFFF\",\n\tbuttonPressTextColor: \"#FFFFFF\",\n\tmaxLength: null,\n\tdisabled: false,\n\teditable: true,\n\tautofocus: false,\n\tselectTextOnFocus: null,\n\tselectionColor: null,\n\treturnKeyLabel: null,\n\treturnKeyType: null,\n\twidth: 150,\n\theight: 50,\n\tbuttonLeftDisabled: false,\n\tbuttonRightDisabled: false,\n\tbuttonLeftText: null,\n\tbuttonRightText: null,\n\tbuttonStyle: {},\n\tbuttonPressStyle: {},\n\tinputStyle: {},\n\tstyle: {},\n\tdecimalSeparator: \".\",\n};\n\nexport default InputSpinner;\n"]},"metadata":{},"sourceType":"module"}