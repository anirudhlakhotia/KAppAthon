{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { API_URL } from \"../../secrets\";\nimport { getToken } from \"./token\";\n\nvar getHeaders = function getHeaders() {\n  var token, headers;\n  return _regeneratorRuntime.async(function getHeaders$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getToken());\n\n        case 2:\n          token = _context.sent;\n          headers = {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          };\n\n          if (token) {\n            headers.Authorization = \"Bearer \" + token;\n          }\n\n          return _context.abrupt(\"return\", headers);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport var post = function post(destination, body) {\n  var headers, result, formattedResult;\n  return _regeneratorRuntime.async(function post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getHeaders());\n\n        case 2:\n          headers = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(fetch(\"\" + API_URL + destination, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: body\n          }));\n\n        case 5:\n          result = _context2.sent;\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(formatResult(result));\n\n        case 8:\n          formattedResult = _context2.sent;\n          return _context2.abrupt(\"return\", formattedResult);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var get = function get(destination) {\n  var headers, result, formattedResult;\n  return _regeneratorRuntime.async(function get$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getHeaders());\n\n        case 2:\n          headers = _context3.sent;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(fetch(\"\" + API_URL + destination, {\n            method: 'GET',\n            headers: headers\n          }));\n\n        case 5:\n          result = _context3.sent;\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(formatResult(result));\n\n        case 8:\n          formattedResult = _context3.sent;\n          return _context3.abrupt(\"return\", formattedResult);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar formatResult = function formatResult(result) {\n  var formatted;\n  return _regeneratorRuntime.async(function formatResult$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          formatted = {\n            status: result.status,\n            ok: result.ok\n          };\n\n          if (!result.ok) {\n            _context4.next = 5;\n            break;\n          }\n\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(result.json());\n\n        case 4:\n          formatted.data = _context4.sent;\n\n        case 5:\n          return _context4.abrupt(\"return\", formatted);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/anirudh/Desktop/KAppAthon/src/api/fetch.js"],"names":["API_URL","getToken","getHeaders","token","headers","Accept","Authorization","post","destination","body","fetch","method","result","formatResult","formattedResult","get","formatted","status","ok","json","data"],"mappings":";AAAA,SAASA,OAAT;AACA,SAASC,QAAT;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGD,QAAQ,EADX;;AAAA;AACXE,UAAAA,KADW;AAEXC,UAAAA,OAFW,GAED;AACdC,YAAAA,MAAM,EAAE,kBADM;AAEd,4BAAgB;AAFF,WAFC;;AAOjB,cAAIF,KAAJ,EAAW;AACTC,YAAAA,OAAO,CAACE,aAAR,eAAkCH,KAAlC;AACD;;AATgB,2CAWVC,OAXU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAcA,OAAO,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAAOC,WAAP,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIP,UAAU,EADd;;AAAA;AACZE,UAAAA,OADY;AAAA;AAAA,2CAGGM,KAAK,MAAIV,OAAJ,GAAcQ,WAAd,EAA6B;AACrDG,YAAAA,MAAM,EAAE,MAD6C;AAErDP,YAAAA,OAAO,EAAC;AACN,8BAAgB;AADV,aAF6C;AAKrDK,YAAAA,IAAI,EAACA;AALgD,WAA7B,CAHR;;AAAA;AAGZG,UAAAA,MAHY;AAAA;AAAA,2CAUYC,YAAY,CAACD,MAAD,CAVxB;;AAAA;AAUZE,UAAAA,eAVY;AAAA,4CAWXA,eAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb;AAcP,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAOP,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACKN,UAAU,EADf;;AAAA;AACXE,UAAAA,OADW;AAAA;AAAA,2CAGIM,KAAK,MAAIV,OAAJ,GAAcQ,WAAd,EAA6B;AACrDG,YAAAA,MAAM,EAAE,KAD6C;AAErDP,YAAAA,OAAO,EAAPA;AAFqD,WAA7B,CAHT;;AAAA;AAGXQ,UAAAA,MAHW;AAAA;AAAA,2CAQaC,YAAY,CAACD,MAAD,CARzB;;AAAA;AAQXE,UAAAA,eARW;AAAA,4CASVA,eATU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;;AAYP,IAAMD,YAAY,GAAG,SAAfA,YAAe,CAAOD,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXI,UAAAA,SADW,GACC;AAChBC,YAAAA,MAAM,EAAEL,MAAM,CAACK,MADC;AAEhBC,YAAAA,EAAE,EAAEN,MAAM,CAACM;AAFK,WADD;;AAAA,eAMbN,MAAM,CAACM,EANM;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAOQN,MAAM,CAACO,IAAP,EAPR;;AAAA;AAOfH,UAAAA,SAAS,CAACI,IAPK;;AAAA;AAAA,4CAUVJ,SAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import { API_URL } from '../../secrets';\nimport { getToken } from './token';\n\nconst getHeaders = async () => {\n  const token = await getToken();\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\nexport const post = async (destination, body) => {\n  const headers = await getHeaders();\n\n  const result = await fetch(`${API_URL}${destination}`, {\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body:body\n  });\n  const formattedResult = await formatResult(result);\n  return formattedResult;\n};\n\nexport const get = async (destination) => {\n  const headers = await getHeaders();\n\n  const result = await fetch(`${API_URL}${destination}`, {\n    method: 'GET',\n    headers,\n  });\n  \n  const formattedResult = await formatResult(result);\n  return formattedResult;\n};\n\nconst formatResult = async (result) => {\n    const formatted = {\n      status: result.status,\n      ok: result.ok,\n    };\n  \n    if (result.ok) {\n      formatted.data = await result.json();\n    }\n  \n    return formatted;\n  };"]},"metadata":{},"sourceType":"module"}