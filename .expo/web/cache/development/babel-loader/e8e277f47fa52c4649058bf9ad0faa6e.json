{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/anirudh/Desktop/kAppAthon/KAppAthon/src/screens/SignupScreen.js\";\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createAccount } from \"../api/authentication\";\nimport SwitchSelector from \"react-native-switch-selector\";\nimport { heightPercentageToDP, widthPercentageToDP } from \"react-native-responsive-screen\";\nimport { post } from \"./../api/fetch\";\nimport CustomInput from \"./CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\n\nvar SignupForm = function SignupForm(_ref) {\n  var buttonText = _ref.buttonText,\n      onSubmit = _ref.onSubmit,\n      children = _ref.children,\n      onAuthentication = _ref.onAuthentication,\n      navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var _useState3 = useState(\"T\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      onChangeType = _useState4[1];\n\n  var signUpValidationSchema = yup.object().shape({\n    name: yup.string().matches(/(\\w.+\\s).+/, \"Enter Full Name\").required(\"Full name is required\"),\n    phoneNumber: yup.string().matches(new RegExp(\"[0-9]{10}\"), \"Enter a valid phone number\").min(8, function (_ref2) {\n      var min = _ref2.min;\n      return \"Phone number must be at least \" + min + \" characters\";\n    }).required(\"Phone number is required\"),\n    email: yup.string().email(\"Please enter valid email\").required(\"Email is required\"),\n    password: yup.string().matches(/\\w*[a-z]\\w*/, \"Password must have a small letter\").matches(/\\w*[A-Z]\\w*/, \"Password must have a capital letter\").matches(/\\d/, \"Password must have a number\").matches(/[!@#$%^&*()\\-_\"=+{}; :,<.>]/, \"Password must have a special character\").min(8, function (_ref3) {\n      var min = _ref3.min;\n      return \"Password must be at least \" + min + \" characters\";\n    }).required(\"Password is required\"),\n    confirmPassword: yup.string().oneOf([yup.ref(\"password\")], \"Passwords do not match\").required(\"Confirm password is required\"),\n    classAttend: yup.string().max(2, function (_ref4) {\n      var max = _ref4.max;\n      return \"Class must have \" + max + \" digits \";\n    }).required(\"Class is required\"),\n    section: yup.string().matches(/\\w*[A-Z]\\w*/, \"Please enter a capital letter\").required(\"Section is required\")\n  });\n\n  var submit = function submit() {\n    if (password == confpassword) {\n      console.log(\"Yes\");\n      var user = {\n        name: name,\n        username: email,\n        password: password,\n        role: type === \"S\" ? \"student\" : \"teacher\",\n        classattend: parseInt(Class),\n        section: section\n      };\n      console.log(user);\n      post(\"/register\", user).then(function _callee(res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(res);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    } else {\n      console.log(\"No\");\n    }\n  };\n\n  return React.createElement(ScrollView, {\n    contentContainerStyle: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    validationSchema: signUpValidationSchema,\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      classAttend: \"\",\n      section: \"\",\n      role: type === \"S\" ? \"student\" : \"teacher\"\n    },\n    onSubmit: function onSubmit(values) {\n      values.classAttend = parseInt(values.classAttend);\n      values.phoneNumber = parseInt(values.phoneNumber);\n      values.role = type === \"S\" ? \"student\" : \"teacher\";\n      console.log(values);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, function (_ref5) {\n    var handleSubmit = _ref5.handleSubmit,\n        isValid = _ref5.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Field, {\n      component: CustomInput,\n      name: \"name\",\n      placeholder: \"Full Name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\",\n      maxLength: 80,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"phoneNumber\",\n      placeholder: \"Phone Number\",\n      keyboardType: \"numeric\",\n      maxLength: 10,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"confirmPassword\",\n      placeholder: \"Confirm Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"classAttend\",\n      placeholder: \"Class\",\n      maxLength: 2,\n      keyboardType: \"numeric\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: CustomInput,\n      name: \"section\",\n      placeholder: \"Section\",\n      maxLength: 1,\n      autoCaptitalize: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \"\\n\"), React.createElement(SwitchSelector, {\n      initial: 0,\n      onPress: function onPress(value) {\n        return onChangeType(value);\n      },\n      style: {\n        width: widthPercentageToDP(\"50%\")\n      },\n      buttonColor: \"#4B0082\",\n      borderColor: \"#4B0082\",\n      textColor: \"#4B0082\",\n      options: [{\n        label: \"Teacher\",\n        value: \"T\"\n      }, {\n        label: \"Student\",\n        value: \"S\"\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, \"\\n\"), React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }, React.createElement(TouchableOpacity, {\n      disabled: !isValid,\n      onPress: handleSubmit,\n      style: {\n        backgroundColor: \"#9370DB\",\n        height: widthPercentageToDP(\"10%\"),\n        borderRadius: widthPercentageToDP(\"5%\"),\n        width: widthPercentageToDP(\"90%\"),\n        overflow: \"hidden\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: \"center\",\n        marginTop: widthPercentageToDP(\"2%\"),\n        color: \"white\",\n        fontFamily: \"sans-serif\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, \"Sign Up\"))));\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \"\\n\"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, \"\\n\"), errorMessage ? React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  }, errorMessage) : null, children);\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#f2f2f2\"\n  },\n  input: {\n    paddingLeft: 10,\n    height: widthPercentageToDP(\"10%\"),\n    width: widthPercentageToDP(\"90%\"),\n    borderColor: \"#4B0082\",\n    borderRadius: widthPercentageToDP(\"5%\"),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: \"#f6f6f6\"\n  },\n  btn: {\n    borderColor: \"#9370DB\"\n  }\n});\n\nvar SignupScreen = function SignupScreen(_ref6) {\n  var navigation = _ref6.navigation;\n  return React.createElement(SignupForm, {\n    buttonText: \"Sign Up\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"blue\",\n      marginBottom: widthPercentageToDP('10%')\n    },\n    onPress: function onPress() {\n      return navigation.navigate(\"LoginScreen\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, \"Already have an account?\"));\n};\n\nexport default SignupScreen;","map":{"version":3,"sources":["/home/anirudh/Desktop/kAppAthon/KAppAthon/src/screens/SignupScreen.js"],"names":["React","useState","createAccount","SwitchSelector","heightPercentageToDP","widthPercentageToDP","post","CustomInput","Formik","Field","yup","SignupForm","buttonText","onSubmit","children","onAuthentication","navigation","errorMessage","setErrorMessage","type","onChangeType","signUpValidationSchema","object","shape","name","string","matches","required","phoneNumber","RegExp","min","email","password","confirmPassword","oneOf","ref","classAttend","max","section","submit","confpassword","console","log","user","username","role","classattend","parseInt","Class","then","res","styles","container","values","handleSubmit","isValid","value","width","label","backgroundColor","height","borderRadius","overflow","textAlign","marginTop","color","fontFamily","StyleSheet","create","flex","alignItems","justifyContent","input","paddingLeft","borderColor","borderWidth","btn","SignupScreen","marginBottom","navigate"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  Button,\n  StyleSheet,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n} from \"react-native\";\nimport { createAccount } from \"../api/authentication\";\nimport SwitchSelector from \"react-native-switch-selector\";\nimport {\n  heightPercentageToDP,\n  widthPercentageToDP,\n} from \"react-native-responsive-screen\";\nimport { post } from \"./../api/fetch\";\nimport CustomInput from \"./CustomInput\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nconst SignupForm = ({\n  buttonText,\n  onSubmit,\n  children,\n  onAuthentication,\n  navigation,\n}) => {\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [type, onChangeType] = useState(\"T\");\n  const signUpValidationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(/(\\w.+\\s).+/, \"Enter Full Name\")\n      .required(\"Full name is required\"),\n    phoneNumber: yup\n      .string()\n      .matches(new RegExp(\"[0-9]{10}\"), \"Enter a valid phone number\")\n      .min(8, ({ min }) => `Phone number must be at least ${min} characters`)\n      .required(\"Phone number is required\"),\n    email: yup\n      .string()\n      .email(\"Please enter valid email\")\n      .required(\"Email is required\"),\n    password: yup\n      .string()\n      .matches(/\\w*[a-z]\\w*/, \"Password must have a small letter\")\n      .matches(/\\w*[A-Z]\\w*/, \"Password must have a capital letter\")\n      .matches(/\\d/, \"Password must have a number\")\n      .matches(\n        /[!@#$%^&*()\\-_\"=+{}; :,<.>]/,\n        \"Password must have a special character\"\n      )\n      .min(8, ({ min }) => `Password must be at least ${min} characters`)\n      .required(\"Password is required\"),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref(\"password\")], \"Passwords do not match\")\n      .required(\"Confirm password is required\"),\n    classAttend: yup\n      .string()\n      .max(2, ({ max }) => `Class must have ${max} digits `)\n      .required(\"Class is required\"),\n    section: yup\n      .string()\n      .matches(/\\w*[A-Z]\\w*/, \"Please enter a capital letter\")\n      .required(\"Section is required\"),\n  });\n\n  // const submit = () => {\n  //   onSubmit(email, password)\n  //     .then(async (res) => {\n  //       await setToken(res.auth_token);\n  //       onAuthentication();\n  //     })\n  //     .catch((res) => {\n  //       if (res && res.error) {\n  //         setErrorMessage(res.error);\n  //       }\n\n  //       setErrorMessage('Something went wrong.');\n  //     });\n  // };\n\n  const submit = () => {\n    if (password == confpassword) {\n      console.log(\"Yes\");\n      const user = {\n        name: name,\n        username: email,\n        password: password,\n        role: type === \"S\" ? \"student\" : \"teacher\",\n        classattend: parseInt(Class),\n        section: section,\n      };\n      console.log(user);\n      post(\"/register\", user).then(async (res) => {\n        console.log(res);\n      });\n    } else {\n      console.log(\"No\");\n    }\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Formik\n        validationSchema={signUpValidationSchema}\n        initialValues={{\n          name: \"\",\n          email: \"\",\n          phoneNumber: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n          classAttend: \"\",\n          section: \"\",\n          role: type === \"S\" ? \"student\" : \"teacher\",\n        }}\n        onSubmit={(values) => {\n          values.classAttend = parseInt(values.classAttend);\n          values.phoneNumber = parseInt(values.phoneNumber);\n          values.role = type === \"S\" ? \"student\" : \"teacher\";\n          console.log(values);\n        }}\n      >\n        {({ handleSubmit, isValid }) => (\n          <>\n            <Field\n              component={CustomInput}\n              name=\"name\"\n              placeholder=\"Full Name\"\n            />\n            <Field\n              component={CustomInput}\n              name=\"email\"\n              placeholder=\"Email Address\"\n              keyboardType=\"email-address\"\n              maxLength={80}\n            />\n            <Field\n              component={CustomInput}\n              name=\"phoneNumber\"\n              placeholder=\"Phone Number\"\n              keyboardType=\"numeric\"\n              maxLength={10}\n            />\n            <Field\n              component={CustomInput}\n              name=\"password\"\n              placeholder=\"Password\"\n              secureTextEntry\n            />\n            <Field\n              component={CustomInput}\n              name=\"confirmPassword\"\n              placeholder=\"Confirm Password\"\n              secureTextEntry\n            />\n            <Field\n              component={CustomInput}\n              name=\"classAttend\"\n              placeholder=\"Class\"\n              maxLength={2}\n              keyboardType=\"numeric\"\n            />\n            <Field\n              component={CustomInput}\n              name=\"section\"\n              placeholder=\"Section\"\n              maxLength={1}\n              autoCaptitalize=\"true\"\n            />\n            <Text>{\"\\n\"}</Text>\n            <SwitchSelector\n              initial={0}\n              onPress={(value) => onChangeType(value)}\n              // textColor={colors.purple} //'#7a44cf'\n              // selectedColor={colors.white}\n              // buttonColor={colors.purple}\n              // borderColor={colors.purple}\n              style={{ width: widthPercentageToDP(\"50%\") }}\n              buttonColor=\"#4B0082\"\n              borderColor=\"#4B0082\"\n              textColor=\"#4B0082\"\n              options={[\n                { label: \"Teacher\", value: \"T\" }, //images.feminino = require('./path_to/assets/img/feminino.png')\n                { label: \"Student\", value: \"S\" }, //images.masculino = require('./path_to/assets/img/masculino.png')\n              ]}\n            />\n\n            <Text>{\"\\n\"}</Text>\n            <View style={styles.container}>\n              <TouchableOpacity\n                disabled={!isValid}\n                onPress={handleSubmit}\n                style={{\n                  backgroundColor: \"#9370DB\",\n                  height: widthPercentageToDP(\"10%\"),\n                  borderRadius: widthPercentageToDP(\"5%\"),\n                  width: widthPercentageToDP(\"90%\"),\n                  overflow: \"hidden\",\n                }}\n              >\n                <Text\n                  style={{\n                    textAlign: \"center\",\n                    marginTop: widthPercentageToDP(\"2%\"),\n                    color: \"white\",\n                    fontFamily: \"sans-serif\",\n                  }}\n                >\n                  Sign Up\n                </Text>\n              </TouchableOpacity>\n            </View>\n          </>\n        )}\n      </Formik>\n      <Text>{\"\\n\"}</Text>\n      <Text>{\"\\n\"}</Text>\n\n      {errorMessage ? <Text>{errorMessage}</Text> : null}\n      {children}\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#f2f2f2\",\n  },\n  input: {\n    paddingLeft: 10,\n    height: widthPercentageToDP(\"10%\"),\n    width: widthPercentageToDP(\"90%\"),\n    borderColor: \"#4B0082\",\n    borderRadius: widthPercentageToDP(\"5%\"),\n    borderWidth: 1,\n    marginTop: 20,\n    backgroundColor: \"#f6f6f6\",\n  },\n  btn: {\n    borderColor: \"#9370DB\",\n  },\n});\nconst SignupScreen = ({ navigation }) => {\n  return (\n    <SignupForm buttonText=\"Sign Up\">\n      <Text\n        style={{ color: \"blue\", marginBottom: widthPercentageToDP('10%') }}\n        onPress={() => navigation.navigate(\"LoginScreen\")}\n      >\n        Already have an account?\n      </Text>\n    </SignupForm>\n  );\n};\n\nexport default SignupScreen;\n"]},"metadata":{},"sourceType":"module"}